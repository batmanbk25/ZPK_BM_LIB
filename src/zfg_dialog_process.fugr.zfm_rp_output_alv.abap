FUNCTION ZFM_RP_OUTPUT_ALV.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(I_REPORT) TYPE  PROGRAMM DEFAULT SY-CPROG
*"     REFERENCE(I_TABNAME) TYPE  TABNAME OPTIONAL
*"     VALUE(I_RP_DATA)
*"     REFERENCE(I_ITEMS_FNAME) TYPE  FIELDNAME OPTIONAL
*"     REFERENCE(IT_FIELDCAT) TYPE  LVC_T_FCAT OPTIONAL
*"     REFERENCE(I_NO_ZERO) TYPE  XMARK OPTIONAL
*"     REFERENCE(IS_VARIANT) TYPE  DISVARIANT OPTIONAL
*"     REFERENCE(T_ALV_LAYOUT) TYPE  ZTT_ALV_LAYOUT OPTIONAL
*"----------------------------------------------------------------------
  DATA:
    LT_ALV_LAYOUT   TYPE TABLE OF ZTB_BM_ALV_LAYO,
    LS_ALV_LAYOUT   TYPE ZTB_BM_ALV_LAYO,
    LT_HEADER       TYPE TABLE OF ZST_ALV_HEADER,
    LS_LOGO         TYPE ZST_BM_ALV_LOGO,
    LT_FIELDCAT     TYPE LVC_T_FCAT,
    LW_HEIGHT       TYPE I,
    LS_VARIANT      TYPE DISVARIANT,
    LS_LAYOUT       TYPE LVC_S_LAYO.
  FIELD-SYMBOLS:
    <LF_DATA>         TYPE ANY,
    <LF_FIELDCAT>     LIKE LINE OF LT_FIELDCAT,
    <LFT_ITEMS>       TYPE STANDARD TABLE.

  CLEAR: LT_HEADER[], LT_FIELDCAT[].

*  BREAK-POINT.

* Get config layout
  IF T_ALV_LAYOUT[] IS INITIAL.
    SELECT *
      INTO TABLE LT_ALV_LAYOUT
      FROM ZTB_BM_ALV_LAYO
     WHERE REPORT  = I_REPORT.
    SORT LT_ALV_LAYOUT BY POSID FNAME.
  ELSE.
    LT_ALV_LAYOUT = T_ALV_LAYOUT[].
  ENDIF.

* Item ALV layout
  IF I_ITEMS_FNAME IS INITIAL.
    READ TABLE LT_ALV_LAYOUT INTO LS_ALV_LAYOUT
      WITH KEY IS_ITEM = 'X'.
  ELSE.
    READ TABLE LT_ALV_LAYOUT INTO LS_ALV_LAYOUT
      WITH KEY FNAME = I_ITEMS_FNAME
               IS_ITEM = 'X'.
  ENDIF.
  CHECK SY-SUBRC IS INITIAL.

* Get items data
*  ASSIGN COMPONENT I_ITEMS_FNAME OF STRUCTURE I_RP_DATA
  ASSIGN COMPONENT LS_ALV_LAYOUT-FNAME OF STRUCTURE I_RP_DATA
    TO <LFT_ITEMS>.
  CHECK SY-SUBRC IS INITIAL.

  IF IS_VARIANT IS INITIAL.
*   Set variant of report
    LS_VARIANT-REPORT = I_REPORT.
    LS_VARIANT-HANDLE = SY-TABIX.
  ELSE.
*   Set variant of report
    LS_VARIANT = IS_VARIANT.
  ENDIF.

* Set optimize columns size
  LS_LAYOUT-CWIDTH_OPT = 'X'.

* Set field name that decide style of cell
  IF LS_ALV_LAYOUT-STYLEFNAME IS NOT INITIAL.
    LS_LAYOUT-STYLEFNAME = LS_ALV_LAYOUT-STYLEFNAME.
  ENDIF.

* Get header data
  CALL FUNCTION 'ZFM_RP_ALV_GET_HEADER_HTML'
    EXPORTING
      I_REPORT     = I_REPORT
      I_TABNAME    = I_TABNAME
      I_RP_DATA    = I_RP_DATA
      T_ALV_LAYOUT = LT_ALV_LAYOUT
    IMPORTING
      T_ALV_HEADER = LT_HEADER
      E_HEIGHT     = LW_HEIGHT
      E_LOGO       = LS_LOGO.

* Get item fieldcat layout
  IF IT_FIELDCAT[] IS INITIAL.
    CALL FUNCTION 'ZFM_RP_ALV_GET_ITEMS_FCAT'
      EXPORTING
        T_ITEMS           = <LFT_ITEMS>
        I_ITEMS_FNAME     = I_ITEMS_FNAME
        I_ALV_LAYOUT_ITEM = LS_ALV_LAYOUT
        I_NO_ZERO         = I_NO_ZERO
      IMPORTING
        T_FIELDCAT        = LT_FIELDCAT.
  ELSE.
    LT_FIELDCAT = IT_FIELDCAT.
  ENDIF.

* Show ALV
  CALL FUNCTION 'ZFM_ALV_DISPLAY'
    EXPORTING
      IT_FIELDCAT       = LT_FIELDCAT
      IT_HEADER         = LT_HEADER
      I_LOGO            = LS_LOGO
      I_HTML_HEIGHT_TOP = LW_HEIGHT
      IS_VARIANT        = LS_VARIANT
      IS_LAYOUT_LVC     = LS_LAYOUT
    TABLES
      T_OUTTAB          = <LFT_ITEMS>.





ENDFUNCTION.
