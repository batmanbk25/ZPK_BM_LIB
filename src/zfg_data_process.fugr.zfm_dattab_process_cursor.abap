FUNCTION ZFM_DATTAB_PROCESS_CURSOR.
*"--------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(I_TABLE) TYPE  TABNAME
*"     REFERENCE(T_WHERE_CLAUSES) TYPE  TT_RSDSWHERE OPTIONAL
*"     REFERENCE(I_PACKSIZE) TYPE  I DEFAULT 5000
*"     REFERENCE(I_PRC_SUB) TYPE  EDPERFORM
*"     REFERENCE(I_COUNT_ALL) TYPE  XMARK OPTIONAL
*"     REFERENCE(I_COMMIT) TYPE  XMARK OPTIONAL
*"  EXPORTING
*"     REFERENCE(T_TABLE_DATA) TYPE  ANY TABLE
*"--------------------------------------------------------------------
DATA:
    LREF_REF_TAB      TYPE REF TO DATA,
    LREF_REF_STR      TYPE REF TO DATA,
    LW_PRC_RECORDS    TYPE NUMC10,
    LW_ALL_RECORDS    TYPE NUMC10.
  FIELD-SYMBOLS:
    <LFT_TAB_DATA>    TYPE ANY TABLE,
    <LF_DATA_STR>     TYPE ANY.

* Create struture data
  CREATE DATA LREF_REF_TAB TYPE STANDARD TABLE OF
         (I_TABLE)." WITH KEY (GT_KEYS).
  ASSIGN LREF_REF_TAB->* TO <LFT_TAB_DATA>.
  CREATE DATA LREF_REF_STR LIKE LINE OF <LFT_TAB_DATA>.
  ASSIGN LREF_REF_STR->* TO <LF_DATA_STR>.

* Check where clause
  IF T_WHERE_CLAUSES IS NOT INITIAL.
    IF I_COUNT_ALL IS NOT INITIAL.
      SELECT COUNT(*)
        FROM (I_TABLE)
        INTO LW_ALL_RECORDS
        WHERE (T_WHERE_CLAUSES).
    ENDIF.

*   Get data from database
    OPEN CURSOR WITH HOLD  GW_DATTAB_CURSOR FOR
    SELECT *
      FROM (I_TABLE)
      WHERE (T_WHERE_CLAUSES).
  ELSE.
    IF I_COUNT_ALL IS NOT INITIAL.
      SELECT COUNT(*)
        INTO LW_ALL_RECORDS
        FROM (I_TABLE).
    ENDIF.

*   Get data from database
    OPEN CURSOR WITH HOLD  GW_DATTAB_CURSOR FOR
    SELECT *
      FROM (I_TABLE).
  ENDIF.

  CLEAR: LW_PRC_RECORDS.
* Process each pack
  DO.
*   Init
    CLEAR <LFT_TAB_DATA>.
    FETCH NEXT CURSOR GW_DATTAB_CURSOR INTO TABLE <LFT_TAB_DATA>
      PACKAGE SIZE I_PACKSIZE.
    IF SY-SUBRC IS NOT INITIAL.
      EXIT.
    ENDIF.

*   Process using subroutine of call prog
    PERFORM (I_PRC_SUB) IN PROGRAM (SY-CPROG)
      USING <LFT_TAB_DATA>.

    IF I_COMMIT IS NOT INITIAL.
*     Commit DB
      CALL FUNCTION 'DB_COMMIT'.
    ENDIF.

    LW_PRC_RECORDS = LW_PRC_RECORDS + LINES( <LFT_TAB_DATA> ).

    CALL FUNCTION 'ZFM_SHOW_PROGRESS_INDICATOR'
      EXPORTING
        I_CURRENT_RECORD        = LW_PRC_RECORDS
        I_TOTAL_RECORD          = LW_ALL_RECORDS.
  ENDDO.

  CLOSE CURSOR GW_DATTAB_CURSOR.

  FREE <LFT_TAB_DATA>.





ENDFUNCTION.
