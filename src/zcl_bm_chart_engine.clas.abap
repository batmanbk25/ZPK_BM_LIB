class ZCL_BM_CHART_ENGINE definition
  public
  final
  create public .

public section.

  data CHART_ENGINE type ref to CL_GUI_CHART_ENGINE .
  data CHART_XDATA type XSTRING .
  constants GC_CHA_CUST_CLASSNAME type BDS_CLSNAM value 'ZBDS_CHA_CUS' ##NO_TEXT.
  constants GC_CHA_CUST_CLASSTYPE type BDS_CLSTYP value 'OT' ##NO_TEXT.

  methods GET_CUSTOMIZING
    exporting
      !E_FILESIZE type I
      !DATA type STRING
      !XDATA type XSTRING
      !DATA_TABLE type W3HTMLTABTYPE
      !XDATA_TABLE type W3MIMETABTYPE .
  methods SAVE_IMAGE
    importing
      !I_FILETYPE type STRING default 'PNG'
      !I_HEIGHT type I default 768
      !I_WIDTH type I default 1024
      !I_FILENAME type STRING default 'chart.png' .
  methods CONSTRUCTOR
    importing
      !I_CHA_PROG type REPID default SY-CPROG
      !I_REPID type REPID default SY-CPROG
      !I_DYNNR type DYNNR default SY-DYNNR
      !I_SIDE type I default CL_GUI_DOCKING_CONTAINER=>DOCK_AT_LEFT
      !I_EXTENSION type I default CL_GUI_DOCKING_CONTAINER=>WS_MAXIMIZEBOX
      !I_CUS_CON_NAME type SCRFNAME optional
      !IT_TABDATA type TABLE .
  methods BIND_DATA
    importing
      !IT_TABDATA type TABLE .
  methods TOGGLE_DESIGN_MODE .
  methods CUSTOMIZING_LOAD .
  methods CUSTOMIZING_LOAD_BDS .
  methods CUSTOMIZING_LOAD_CONFIG .
  methods CUSTOMIZING_FILE_EXPORT
    importing
      !I_FILENAME type STRING default 'customizing.xml' .
  methods CUSTOMIZING_FILE_IMPORT .
  methods CUSTOMIZING_SAVE_BDS .
  methods SET_TIMER_CHART
    importing
      !I_INTERVAL type I default 60
      !I_REFRESH_FORM type SLIS_FORMNAME
      !I_REFRESH_PROG type REPID default SY-CPROG .
  methods STOP_TIMER .
protected section.
private section.

  data CHART_DOCKING type ref to CL_GUI_DOCKING_CONTAINER .
  data CHART_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data CHART_CONF type ZST_BM_CHART_CONF .
  data CHART_DATA type ref to DATA .
  data CHART_STD_DATA type ZST_BM_CHART_STD_DATA .
  data TIMER type ref to CL_GUI_TIMER .
  data TIMER_REFRESH_FORM type SLIS_FORMNAME .
  data TIMER_REFRESH_PROG type REPID .
  data TIMER_COUNTER type I .

  methods HANDLE_TIMER_FINISHED
    for event FINISHED of CL_GUI_TIMER .
  methods UPD_IMG_CUSTOMIZING
    importing
      !I_FILETYPE type STRING default 'PNG'
      !I_HEIGHT type I default 768
      !I_WIDTH type I default 1024
    exporting
      !E_CUSTOMIZING type XSTRING .
  methods GENERATE_CHART_IMG
    importing
      !I_CUSTOMIZE type XSTRING
    exporting
      !ET_IMG_DATA type W3MIMETABTYPE
      !E_FILESIZE type I .
  methods HANDLE_PROPERTY_CHANGE
    for event PROPERTY_CHANGE of CL_GUI_CHART_ENGINE
    importing
      !ELEMENT
      !NAME
      !VALUE .
ENDCLASS.



CLASS ZCL_BM_CHART_ENGINE IMPLEMENTATION.


METHOD BIND_DATA.
  DATA:
    LW_STR                    TYPE STRING,
    LS_SERI_LAYO              TYPE ZST_BM_CHA_LAYO_SERI,
    LS_POINT                  TYPE ZST_BM_CHART_POINT,
    LS_CATEGORY               TYPE ZST_BM_CHART_CAT,
    LS_SERIES                 TYPE ZST_BM_CHART_SERI,
    LW_VALUE                  TYPE STRING,
    LW_CHAR30                 TYPE CHAR30,
    LW_SERVAL                 TYPE ZST_BM_CHART_VALS.
  FIELD-SYMBOLS:
    <LF_VALUE>                TYPE ANY,
    <LF_RECORD>               TYPE ANY,
    <LFT_CHART_DATA>          TYPE TABLE.

  CLEAR: CHART_STD_DATA.
  IF CHART_DATA IS INITIAL.
    CREATE DATA CHART_DATA LIKE IT_TABDATA.
    ASSIGN CHART_DATA->* TO <LFT_CHART_DATA>.
    <LFT_CHART_DATA> = IT_TABDATA.
  ENDIF.

* Loop records to convert
  LOOP AT IT_TABDATA ASSIGNING <LF_RECORD>.
    CLEAR: LS_POINT.

*   Prepare Category layout
    MOVE-CORRESPONDING CHART_CONF-CAT_LAYO TO LS_CATEGORY.
    ASSIGN COMPONENT LS_CATEGORY-CAT_FIELD
      OF STRUCTURE <LF_RECORD> TO <LF_VALUE>.
    IF SY-SUBRC IS INITIAL.
      LW_VALUE = <LF_VALUE>.
*     Get X value
      LS_POINT-CATE_VAL   = LW_VALUE.
      LW_SERVAL-VALUE     = LW_VALUE.
      APPEND LW_SERVAL TO LS_CATEGORY-VALUES.
      CLEAR LW_VALUE.
    ENDIF.

*   Prepare Seri layout
    LOOP AT CHART_CONF-SERI_LAYO INTO LS_SERI_LAYO.
      ASSIGN COMPONENT LS_SERI_LAYO-SERI_FIELD OF STRUCTURE <LF_RECORD>
        TO <LF_VALUE>.
      IF SY-SUBRC IS INITIAL.
        LW_SERVAL-VALUE = <LF_VALUE>.
        APPEND LW_SERVAL TO LS_POINT-SERI_VALS .
        CLEAR LW_SERVAL.
      ENDIF.
    ENDLOOP.
    APPEND LS_POINT TO CHART_STD_DATA-POINTS.
    CHART_STD_DATA-CATEGORIES = LS_CATEGORY.
  ENDLOOP.

* Prepare series
  LOOP AT CHART_CONF-SERI_LAYO INTO LS_SERI_LAYO.
    CLEAR LS_SERIES.
    MOVE-CORRESPONDING LS_SERI_LAYO TO LS_SERIES.
    LOOP AT IT_TABDATA ASSIGNING <LF_RECORD>.
      ASSIGN COMPONENT LS_SERI_LAYO-SERI_FIELD OF STRUCTURE <LF_RECORD>
        TO <LF_VALUE>.
      IF SY-SUBRC IS INITIAL.
        LW_SERVAL-VALUE = <LF_VALUE>.
        WRITE <LF_VALUE> TO LW_CHAR30 DECIMALS 0 NO-GAP.
        CONDENSE LW_CHAR30.
        LW_SERVAL-TOOLTIP   = 'alt=''' && LW_CHAR30 && ''''.
        APPEND LW_SERVAL TO LS_SERIES-VALUES .
      ENDIF.
    ENDLOOP.
    APPEND LS_SERIES TO CHART_STD_DATA-SERIES.
  ENDLOOP.

* Conversation chart data
  IF 1 = 1.
    CALL TRANSFORMATION ZTR_BM_CHART_P
      SOURCE DATA = CHART_STD_DATA
      RESULT XML CHART_XDATA
      OPTIONS XML_HEADER = 'no'.
  ELSE.
    CALL TRANSFORMATION ZTR_BM_CHART
      SOURCE DATA = CHART_STD_DATA
      RESULT XML CHART_XDATA
      OPTIONS XML_HEADER = 'no'.
  ENDIF.

  IF 1 = 2.
*    CALL TRANSFORMATION ZTR_BM_CHART
    CALL TRANSFORMATION ZTR_BM_CHART_P
      SOURCE DATA = CHART_STD_DATA
      RESULT XML LW_STR
      OPTIONS XML_HEADER = 'no'.
  ENDIF.

* Set data to chart
  CHART_ENGINE->SET_DATA( XDATA = CHART_XDATA ).

ENDMETHOD.


METHOD CONSTRUCTOR.
  DATA:
    LW_EXTENSION              TYPE I.

* Get config
  CALL FUNCTION 'ZFM_BM_CHART_STD_GET_CONFIG'
    EXPORTING
      I_CPROG      = I_CHA_PROG
    CHANGING
      C_CHART_CONF = CHART_CONF.

  IF I_CUS_CON_NAME IS INITIAL.
*   Create Docking container
    CREATE OBJECT CHART_DOCKING
      EXPORTING
        REPID                       = I_REPID
        DYNNR                       = I_DYNNR
        SIDE                        = I_SIDE
        EXTENSION                   = I_EXTENSION
        NO_AUTODEF_PROGID_DYNNR     = 'X'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        OTHERS                      = 6.

*   Create chart
    CREATE OBJECT CHART_ENGINE
      EXPORTING
        PARENT = CHART_DOCKING.
  ELSE.
*   Create custom container
    CREATE OBJECT CHART_CONTAINER
      EXPORTING
        CONTAINER_NAME              = I_CUS_CON_NAME
        REPID                       = I_REPID
        DYNNR                       = I_DYNNR
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        OTHERS                      = 6.

*   Create chart
    CREATE OBJECT CHART_ENGINE
      EXPORTING
        PARENT = CHART_CONTAINER.

  ENDIF.

* Set handle
  SET HANDLER ME->HANDLE_PROPERTY_CHANGE FOR CHART_ENGINE.

* Load customizing
  CALL METHOD CUSTOMIZING_LOAD.

* Load customizing
  CALL METHOD BIND_DATA
    EXPORTING
      IT_TABDATA = IT_TABDATA.

* Render chart
  CALL METHOD CHART_ENGINE->RENDER.

ENDMETHOD.


METHOD CUSTOMIZING_FILE_EXPORT.
  DATA:
    LT_CUSTOMIZE          TYPE W3MIMETABTYPE,
    LW_FILESIZE           TYPE I.

* Get customizing
  CALL METHOD ME->GET_CUSTOMIZING
    IMPORTING
      XDATA_TABLE = LT_CUSTOMIZE
      E_FILESIZE  = LW_FILESIZE.

* Export customizing
  CALL FUNCTION 'ZFM_POPUP_FILE_SAVE'
    EXPORTING
      I_FILENAME  = I_FILENAME
      IT_FILEDATA = LT_CUSTOMIZE
      I_FILESIZE  = LW_FILESIZE.

ENDMETHOD.


METHOD CUSTOMIZING_FILE_IMPORT.
  DATA:
    LT_CUSTOMIZE          TYPE W3MIMETABTYPE,
    LO_WIN_CHART          TYPE REF TO CL_GUI_CHART_ENGINE_WIN.

  CATCH SYSTEM-EXCEPTIONS MOVE_CAST_ERROR = 1.
    LO_WIN_CHART ?= CHART_ENGINE->GET_CONTROL( ).
  ENDCATCH.
  IF SY-SUBRC IS INITIAL.
*   Popup to load customizing file
    CALL FUNCTION 'ZFM_POPUP_FILE_OPEN'
      EXPORTING
        I_EXTENSION = 'xml'
      IMPORTING
        ET_BIN_TAB  = LT_CUSTOMIZE.

*   Set customizing to graph
    CALL METHOD CHART_ENGINE->SET_CUSTOMIZING
      EXPORTING
        XDATA_TABLE = LT_CUSTOMIZE.
  ENDIF.
ENDMETHOD.


METHOD CUSTOMIZING_LOAD.
* Load customize from document in BDS
  IF CHART_CONF-CUST_DOC_ID IS NOT INITIAL.
    CALL METHOD CUSTOMIZING_LOAD_BDS.
* Load customize from config
  ELSE.
    CALL METHOD CUSTOMIZING_LOAD_CONFIG.
  ENDIF.
ENDMETHOD.


METHOD CUSTOMIZING_LOAD_BDS.
  DATA:
  LT_COMPONENTS         TYPE SBDST_COMPONENTS,
  LT_CONTENT            TYPE RSSEM_UI_YT_DOC_AS_CONTENT,
  LT_SIGNATURE          TYPE RSZW_T_BAPISIGNAT,
  LW_LENGTH             TYPE I,
  LW_CUSTOMIZING        TYPE XSTRING.

* Get customizing file info on server
  CALL FUNCTION 'BDS_BUSINESSDOCUMENT_GET_INFO'
    EXPORTING
      CLASSNAME  = GC_CHA_CUST_CLASSNAME
      CLASSTYPE  = GC_CHA_CUST_CLASSTYPE
      OBJECT_KEY = CHART_CONF-CUST_OBJKEY
    TABLES
      SIGNATURE  = LT_SIGNATURE
      COMPONENTS = LT_COMPONENTS
    EXCEPTIONS
      OTHERS     = 7.
  IF SY-SUBRC IS INITIAL.
*   Get customizing data
    CALL FUNCTION 'BDS_BUSINESSDOCUMENT_GET_TAB'
      EXPORTING
        CLASSNAME     = GC_CHA_CUST_CLASSNAME
        CLASSTYPE     = GC_CHA_CUST_CLASSTYPE
        OBJECT_KEY    = CHART_CONF-CUST_OBJKEY
      TABLES
        SIGNATURE     = LT_SIGNATURE
        COMPONENTS    = LT_COMPONENTS
        ASCII_CONTENT = LT_CONTENT
      EXCEPTIONS
        OTHERS        = 7.

    IF 1 = 1.
      CALL TRANSFORMATION ID
        SOURCE XML LT_CONTENT
        RESULT XML LW_CUSTOMIZING.
    ELSE.
      LW_LENGTH = LINES( LT_CONTENT ) * 1022.
*     Convert to Xstring
      CALL FUNCTION 'SCMS_FTEXT_TO_XSTRING'
        EXPORTING
          INPUT_LENGTH = LW_LENGTH
        IMPORTING
          BUFFER       = LW_CUSTOMIZING
        TABLES
          FTEXT_TAB    = LT_CONTENT.
    ENDIF.

*   Set net config to chart
    CHART_ENGINE->SET_CUSTOMIZING( XDATA = LW_CUSTOMIZING ).
  ENDIF.

ENDMETHOD.


METHOD CUSTOMIZING_LOAD_CONFIG.
  DATA:
    LW_STR              TYPE STRING,
    LW_XSTR             TYPE XSTRING.

* Generate chart type, dimension text
  CALL FUNCTION 'CONVERSION_EXIT_ZZALL_OUTPUT':
    EXPORTING INPUT     = CHART_CONF-GLOBAL-CHARTTYPE
              I_DOMNAME = 'ZDO_CHARTTYPE'
    IMPORTING OUTPUT    = CHART_CONF-CHARTTYPE_TX,
    EXPORTING INPUT     = CHART_CONF-GLOBAL-DIMENSION
              I_DOMNAME = 'ZDO_BM_CHA_DIMENS'
    IMPORTING OUTPUT    = CHART_CONF-DIMENSION_TX.

* Generate XML customize
  CALL TRANSFORMATION ZTR_BM_CHART_CUSTOMIZE
    OPTIONS XML_HEADER = 'no'
    SOURCE DATA = CHART_CONF
    RESULT XML LW_XSTR.
* Use to check customize
  IF 1 = 2.
    CALL TRANSFORMATION ZTR_BM_CHART_CUSTOMIZE
      OPTIONS XML_HEADER = 'no'
      SOURCE DATA = CHART_CONF
      RESULT XML LW_STR.
  ENDIF.

* Set customize to chart
  CHART_ENGINE->SET_CUSTOMIZING( XDATA = LW_XSTR ).

ENDMETHOD.


METHOD CUSTOMIZING_SAVE_BDS.
  DATA:
    LT_XCUSTOMIZE             TYPE W3MIMETABTYPE,
    LW_FILESIZE               TYPE I,
    LT_COMPONENTS             TYPE SBDST_COMPONENTS,
    LS_COMPONENTS             TYPE BAPICOMPON ,
    LT_CONTENT                TYPE SBDST_CONTENT,
    LW_OBJECT_KEY             TYPE SBDST_OBJECT_KEY,
    LS_SIGNATURE              TYPE BAPISIGNAT,
    LT_SIGNATURE              TYPE SBDST_SIGNATURE,
    LS_CHA_CUSTOMIZE          TYPE ZTB_BM_CHA_CUST.

* Get customizing
  CALL METHOD ME->GET_CUSTOMIZING
    IMPORTING
      XDATA_TABLE = LT_XCUSTOMIZE.

* Convert to document data
  CALL FUNCTION 'ZFM_BM_BINARY_TO_BINARY'
    EXPORTING
      IT_SOURCE_BIN      = LT_XCUSTOMIZE
    IMPORTING
      E_LENGTH           = LW_FILESIZE
      ET_DESTINATION_BIN = LT_CONTENT.

* Init component
  LS_COMPONENTS-DOC_COUNT   = 1.
  LS_COMPONENTS-COMP_COUNT  = 1.
  LS_COMPONENTS-COMP_SIZE   = LW_FILESIZE.
  LS_COMPONENTS-MIMETYPE    = 'text/xml'.
  LS_COMPONENTS-COMP_ID     = 'Chart customizing.xml'.
  APPEND LS_COMPONENTS TO LT_COMPONENTS.

* Init signature
  LS_SIGNATURE-DOC_COUNT    = '1'.
  LS_SIGNATURE-PROP_NAME    = 'BDS_DOCUMENTTYPE'.
  LS_SIGNATURE-PROP_VALUE   = 'BDS_ATTACH'.
  APPEND LS_SIGNATURE TO LT_SIGNATURE.

  LS_SIGNATURE-PROP_NAME    = 'BDS_DOCUMENTCLASS'.
  LS_SIGNATURE-PROP_VALUE   = 'XML'.
  APPEND LS_SIGNATURE TO LT_SIGNATURE.

  LS_SIGNATURE-PROP_NAME    = 'DESCRIPTION'.
  LS_SIGNATURE-PROP_VALUE   = 'Chart customizing'.
  APPEND LS_SIGNATURE TO LT_SIGNATURE.

  LS_SIGNATURE-PROP_NAME    = 'LANGUAGE'.
  LS_SIGNATURE-PROP_VALUE   = 'E'.
  APPEND LS_SIGNATURE TO LT_SIGNATURE.

* Create new chart customizing doc
  IF CHART_CONF-CUST_DOC_ID IS INITIAL.
    CALL FUNCTION 'BDS_BUSINESSDOCUMENT_CREA_TAB'
      EXPORTING
        CLASSNAME     = GC_CHA_CUST_CLASSNAME
        CLASSTYPE     = GC_CHA_CUST_CLASSTYPE
        OBJECT_KEY    = CHART_CONF-CUST_OBJKEY
      IMPORTING
        OBJECT_KEY    = LW_OBJECT_KEY
      TABLES
        SIGNATURE     = LT_SIGNATURE
        COMPONENTS    = LT_COMPONENTS
        CONTENT       = LT_CONTENT
      EXCEPTIONS
        NOTHING_FOUND = 1
        OTHERS        = 7.

*   Log to DB
    READ TABLE LT_SIGNATURE INTO LS_SIGNATURE INDEX 1.
    LS_CHA_CUSTOMIZE-REPORT   = CHART_CONF-REPID.
    LS_CHA_CUSTOMIZE-TABNAME  = CHART_CONF-TABNAME.
    LS_CHA_CUSTOMIZE-UNAME    = SPACE.
    LS_CHA_CUSTOMIZE-OBJKEY   = CHART_CONF-CUST_OBJKEY.
    LS_CHA_CUSTOMIZE-DOC_ID   = LS_SIGNATURE-DOC_ID.
    INSERT ZTB_BM_CHA_CUST FROM LS_CHA_CUSTOMIZE.
    COMMIT WORK.
* Update chart customizing doc
  ELSE.
    CALL FUNCTION 'BDS_BUSINESSDOCUMENT_UPD_TAB'
      EXPORTING
        CLASSNAME   = GC_CHA_CUST_CLASSNAME
        CLASSTYPE   = GC_CHA_CUST_CLASSTYPE
        OBJECT_KEY  = CHART_CONF-CUST_OBJKEY
        DOC_ID      = CHART_CONF-CUST_DOC_ID
        DOC_VER_NO  = 1
        DOC_VAR_ID  = 1
        BINARY_FLAG = 'X'
      TABLES
        COMPONENTS  = LT_COMPONENTS
        CONTENT     = LT_CONTENT
        SIGNATURE   = LT_SIGNATURE
      EXCEPTIONS
        OTHERS      = 7.
  ENDIF.

ENDMETHOD.


METHOD GENERATE_CHART_IMG.
  DATA:
    LO_IGS_DATA               TYPE REF TO CL_IGS_DATA,
    LW_RC                     TYPE I,
    LT_CUSTOMIZE              TYPE W3MIMETABTYPE,
    LW_CUSTOMIZE              TYPE XSTRING,
    LW_TABLE_INDEX            TYPE I,
    LW_PATH                   TYPE STRING.

* Create IGS data
  CREATE OBJECT LO_IGS_DATA.

* Add Chart data
  CALL METHOD LO_IGS_DATA->ADD_XSTRING
    EXPORTING
      INPUT  = CHART_XDATA
      NAME   = 'DATA'
    RECEIVING
      RESULT = LW_RC.

* Add Chart customizing
  CALL METHOD LO_IGS_DATA->ADD_XSTRING
    EXPORTING
      INPUT  = I_CUSTOMIZE
      NAME   = 'CUSTOM'
    RECEIVING
      RESULT = LW_RC.

* Generate chart output
  CALL METHOD LO_IGS_DATA->SEND
    EXPORTING
      RFCDESTINATION          = 'IGS_RFC_DEST'
      FARM_TYPE               = 'XMLCHART'
    EXCEPTIONS
      RFC_COMMUNICATION_ERROR = 1
      RFC_SYSTEM_ERROR        = 2
      INTERNAL_ERROR          = 3
      OTHERS                  = 4.
  IF SY-SUBRC IS INITIAL.
*   Get chart output image binary data
    LW_TABLE_INDEX = LO_IGS_DATA->GET_INDEX_BY_NAME( 'Picture' ).
    IF LW_TABLE_INDEX GT 0.
      CALL METHOD LO_IGS_DATA->GET_TABLE
        EXPORTING
          NUMBER = LW_TABLE_INDEX
        IMPORTING
          LENGTH = E_FILESIZE
          TABLE  = ET_IMG_DATA.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD GET_CUSTOMIZING.
  DATA:
    LO_WIN_CHART              TYPE REF TO CL_GUI_CHART_ENGINE_WIN.

  CATCH SYSTEM-EXCEPTIONS MOVE_CAST_ERROR = 1.
    LO_WIN_CHART ?= CHART_ENGINE->GET_CONTROL( ).
  ENDCATCH.
  CHECK SY-SUBRC IS INITIAL.

  IF DATA_TABLE IS REQUESTED
  OR DATA IS REQUESTED.
    CALL METHOD LO_WIN_CHART->GET_CUSTOMIZING
      IMPORTING
        DATA_TABLE = DATA_TABLE.

    IF DATA IS REQUESTED.
      CONCATENATE LINES OF DATA_TABLE INTO DATA.
    ENDIF.
*   Set file size
    E_FILESIZE = LINES( XDATA_TABLE ) * 255.
  ENDIF.

  IF XDATA_TABLE IS REQUESTED
  OR XDATA IS REQUESTED.
    CALL METHOD LO_WIN_CHART->GET_CUSTOMIZING
      IMPORTING
        XDATA_TABLE = XDATA_TABLE.

*   Set file size
    E_FILESIZE = LINES( XDATA_TABLE ) * 255.

    IF XDATA IS REQUESTED.
      CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
        EXPORTING
          INPUT_LENGTH = E_FILESIZE
        IMPORTING
          BUFFER       = XDATA
        TABLES
          BINARY_TAB   = XDATA_TABLE.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD HANDLE_PROPERTY_CHANGE.
*  IF NAME = 'Dimension'.
*    GS_BM_CHART_CONF-DIMENSION_TX = VALUE.
*  ENDIF.
*  IF NAME = 'ChartType'.
*    GS_BM_CHART_CONF-CHARTTYPE_TX = VALUE.
*  ENDIF.
*
*  PERFORM CHART_STD_LAYOUT_CONV_IN
*    CHANGING GS_BM_CHART_CONF.
*  MOVE-CORRESPONDING GS_BM_CHART_CONF-GLOBAL
*    TO ZST_BM_CHART_LAYO_GLOBAL.
ENDMETHOD.


METHOD HANDLE_TIMER_FINISHED.
  FIELD-SYMBOLS:
    <LFT_CHART_DATA>          TYPE TABLE.

* Set counter
  ADD TIMER->INTERVAL TO TIMER_COUNTER.
  MESSAGE S014(ZMS_COL_LIB) WITH TIMER_COUNTER.

  ASSIGN CHART_DATA->* TO <LFT_CHART_DATA>.

* Get data
  PERFORM (TIMER_REFRESH_FORM) IN PROGRAM (TIMER_REFRESH_PROG) IF FOUND
    CHANGING <LFT_CHART_DATA>.

* Bind data to chart
  CALL METHOD ME->BIND_DATA
    EXPORTING
      IT_TABDATA = <LFT_CHART_DATA>.

* Render the Graph Object.
  CALL METHOD CHART_ENGINE->RENDER.

* Continue timer
  CALL METHOD TIMER->RUN.

ENDMETHOD.


METHOD SAVE_IMAGE.
  DATA:
    LW_CUSTOMIZE              TYPE XSTRING,
    LT_IMAGE_MIME             TYPE W3MIMETABTYPE,
    LW_FILESIZE               TYPE I.

* Get customizing with file format
  CALL METHOD UPD_IMG_CUSTOMIZING
    EXPORTING
      I_FILETYPE    = I_FILETYPE
      I_HEIGHT      = I_HEIGHT
      I_WIDTH       = I_WIDTH
    IMPORTING
      E_CUSTOMIZING = LW_CUSTOMIZE.

* Generate Chart image binary data
  CALL METHOD GENERATE_CHART_IMG
    EXPORTING
      I_CUSTOMIZE = LW_CUSTOMIZE
    IMPORTING
      ET_IMG_DATA = LT_IMAGE_MIME
      E_FILESIZE  = LW_FILESIZE.

* Save chart image to file
  CALL FUNCTION 'ZFM_POPUP_FILE_SAVE'
    EXPORTING
      I_FILENAME  = I_FILENAME
      IT_FILEDATA = LT_IMAGE_MIME
      I_FILESIZE  = LW_FILESIZE.

ENDMETHOD.


METHOD SET_TIMER_CHART.
* Create timer object
  CHECK TIMER IS NOT BOUND.
  CREATE OBJECT TIMER.
  TIMER->INTERVAL             = I_INTERVAL.
  TIMER_REFRESH_PROG          = I_REFRESH_PROG.
  TIMER_REFRESH_FORM          = I_REFRESH_FORM.

* Set handler when finish interval
  SET HANDLER ME->HANDLE_TIMER_FINISHED FOR TIMER.
  CALL METHOD TIMER->RUN.

ENDMETHOD.


METHOD STOP_TIMER.
* Cancel timer
  CALL METHOD TIMER->CANCEL.

* Free timer object
  CALL METHOD TIMER->FREE.
  FREE TIMER.

ENDMETHOD.


METHOD TOGGLE_DESIGN_MODE.
  DATA:
    LO_WIN_CHART        TYPE REF TO CL_GUI_CHART_ENGINE_WIN.

  CATCH SYSTEM-EXCEPTIONS MOVE_CAST_ERROR = 1.
    LO_WIN_CHART ?= CHART_ENGINE->GET_CONTROL( ).
  ENDCATCH.
  IF SY-SUBRC IS INITIAL.
    IF CHART_CONF-GLOBAL-DESIGN_MODE IS INITIAL.
      CHART_CONF-GLOBAL-DESIGN_MODE   = 'X'.
    ELSE.
      CHART_CONF-GLOBAL-DESIGN_MODE   = ' '.
    ENDIF.

    LO_WIN_CHART->SET_DESIGN_MODE(
      FLAG = CHART_CONF-GLOBAL-DESIGN_MODE
      EVENT = 'X' ).

*    LO_WIN_CHART->RESTRICT_CHART_TYPES(
*      CHARTTYPES = 'Columns|Lines' ).
*    LO_WIN_CHART->RESTRICT_PROPERTY_EVENTS(
*      EVENTS = 'ChartType' ).
  ENDIF.
ENDMETHOD.


METHOD UPD_IMG_CUSTOMIZING.
  DATA:
    LO_IGS_DATA               TYPE REF TO CL_IGS_DATA,
    LO_XML                    TYPE REF TO CL_XML_DOCUMENT,
    LO_NODE                   TYPE REF TO IF_IXML_NODE,
    LO_NODE_GLB               TYPE REF TO IF_IXML_NODE,
    LW_HEIGHT                 TYPE STRING,
    LW_WIDTH                  TYPE STRING.

* Init
  LW_HEIGHT                   = I_HEIGHT.
  LW_WIDTH                    = I_WIDTH.
  CONDENSE: LW_HEIGHT, LW_WIDTH.

* Get customizing
  CALL METHOD GET_CUSTOMIZING
    IMPORTING
      XDATA = E_CUSTOMIZING.

* Set XML customize to document to process
  CREATE OBJECT LO_XML.

  CALL METHOD LO_XML->PARSE_XSTRING
    EXPORTING
      STREAM = E_CUSTOMIZING.

* Search node Dimension update
  LO_NODE_GLB = LO_XML->FIND_NODE( NAME = 'GlobalSettings' ).
  CALL METHOD LO_XML->CREATE_SIMPLE_ELEMENT
    EXPORTING
      NAME     = 'FileType'
      VALUE    = I_FILETYPE
      PARENT   = LO_NODE_GLB
    RECEIVING
      NEW_NODE = LO_NODE.

  CALL METHOD LO_XML->CREATE_SIMPLE_ELEMENT
    EXPORTING
      NAME     = 'Height'
      VALUE    = LW_HEIGHT
      PARENT   = LO_NODE_GLB
    RECEIVING
      NEW_NODE = LO_NODE.

  CALL METHOD LO_XML->CREATE_SIMPLE_ELEMENT
    EXPORTING
      NAME     = 'Width'
      VALUE    = LW_WIDTH
      PARENT   = LO_NODE_GLB
    RECEIVING
      NEW_NODE = LO_NODE.

* Render customize to Xstring
  CALL METHOD LO_XML->RENDER_2_XSTRING
    IMPORTING
      STREAM = E_CUSTOMIZING.

ENDMETHOD.
ENDCLASS.
