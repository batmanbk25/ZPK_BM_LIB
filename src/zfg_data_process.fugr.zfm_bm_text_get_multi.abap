FUNCTION ZFM_BM_TEXT_GET_MULTI.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(IT_NAME) TYPE  ZTT_TDOBNAME
*"     REFERENCE(I_ID) TYPE  THEAD-TDID DEFAULT '*'
*"     REFERENCE(I_OBJECT) TYPE  THEAD-TDOBJECT
*"  EXPORTING
*"     REFERENCE(ET_TX) TYPE  ZTT_BM_TX
*"  CHANGING
*"     REFERENCE(CT_TEXT) TYPE  ZTT_BM_TX
*"----------------------------------------------------------------------
  DATA:
    LT_NAME_RANGE TYPE TSPSRNAME,
    LS_NAME_RANGE TYPE STXDRNAME,
    LT_TEXT_TAB   TYPE TEXT_LH,
    LS_THEAD      TYPE THEAD,
    LT_ERR_TAB    TYPE TEXT_LH,
    LS_TX         TYPE ZST_BM_TX,
    BEGIN OF LS_LINE,
      TDLINE TYPE TDLINE,
    END OF LS_LINE,
    LT_LINE        LIKE TABLE OF LS_LINE,
    LT_TEXT_HEADER TYPE TABLE OF THEAD..

  CLEAR: ET_TX.

  IF I_ID IS INITIAL.
    LOOP AT CT_TEXT ASSIGNING FIELD-SYMBOL(<LF_LTEXT>).
      LS_THEAD-TDOBJECT = <LF_LTEXT>-OBJECT.
      LS_THEAD-TDNAME   = <LF_LTEXT>-NAME.
      LS_THEAD-TDID     = <LF_LTEXT>-TDID.
      IF <LF_LTEXT>-SPRAS IS INITIAL.
        LS_THEAD-TDSPRAS  = SY-LANGU.
      ELSE.
        LS_THEAD-TDSPRAS  = <LF_LTEXT>-SPRAS.
      ENDIF.
      APPEND LS_THEAD TO LT_TEXT_HEADER.
    ENDLOOP.

    "Get Multiple Long Text
    CALL FUNCTION 'READ_TEXT_TABLE'
      IMPORTING
        TEXT_TABLE              = LT_TEXT_TAB
        ERROR_TABLE             = LT_ERR_TAB
      TABLES
        TEXT_HEADERS            = LT_TEXT_HEADER
      EXCEPTIONS
        WRONG_ACCESS_TO_ARCHIVE = 1
        OTHERS                  = 2.
  ELSE.
    CHECK IT_NAME IS NOT INITIAL.
    LOOP AT IT_NAME INTO DATA(LS_NAMET).
      LS_NAME_RANGE-SIGN    = 'I'.
      LS_NAME_RANGE-OPTION  = 'EQ'.
      LS_NAME_RANGE-LOW     = LS_NAMET-NAME.
      APPEND LS_NAME_RANGE TO LT_NAME_RANGE.
    ENDLOOP.

    CALL FUNCTION 'READ_MULTIPLE_TEXTS'
      EXPORTING
        OBJECT                  = I_OBJECT
        ID                      = I_ID
        LANGUAGE                = SY-LANGU
        NAME_RANGES             = LT_NAME_RANGE
      IMPORTING
        TEXT_TABLE              = LT_TEXT_TAB
        ERROR_TABLE             = LT_ERR_TAB
      EXCEPTIONS
        WRONG_ACCESS_TO_ARCHIVE = 1
        OTHERS                  = 2.
  ENDIF.

  SORT CT_TEXT BY OBJECT NAME TDID.

  LOOP AT LT_TEXT_TAB INTO DATA(LS_TEXT).
    LS_TX-OBJECT  = LS_TEXT-HEADER-TDOBJECT.
    LS_TX-NAME    = LS_TEXT-HEADER-TDNAME.
    LS_TX-TDID    = LS_TEXT-HEADER-TDID.
    MOVE-CORRESPONDING LS_TEXT-LINES TO LT_LINE.
    CONCATENATE LINES OF LT_LINE INTO LS_TX-TEXT
      SEPARATED BY SPACE.
    IF LS_TX-TEXT CA '&'.
      REPLACE ALL OCCURRENCES OF '<(>' IN LS_TX-TEXT WITH SPACE.
      REPLACE ALL OCCURRENCES OF '<)>' IN LS_TX-TEXT WITH SPACE.
    ENDIF.
    LS_TX-LINES = LS_TEXT-LINES.

    READ TABLE CT_TEXT ASSIGNING FIELD-SYMBOL(<LF_TEXT>)
      WITH KEY OBJECT = LS_TEXT-HEADER-TDOBJECT
               NAME = LS_TEXT-HEADER-TDNAME
               TDID = LS_TEXT-HEADER-TDID BINARY SEARCH.
    IF SY-SUBRC IS INITIAL.
      <LF_TEXT>-TEXT  = LS_TX-TEXT.
      <LF_TEXT>-LINES = LS_TX-LINES.
    ELSE.
      INSERT LS_TX INTO CT_TEXT INDEX SY-TABIX.
*      APPEND LS_TX TO CT_TEXT.
*      SORT CT_TEXT BY OBJECT NAME TDID.
    ENDIF.
*    READ TABLE IT_NAME INTO LS_NAMET
*      WITH KEY NAME = LS_TEXT-HEADER-TDNAME.
*    IF SY-SUBRC IS INITIAL.
*      LS_TX-NAME    = LS_NAMET-NAME.
*      LS_TX-TDID    = LS_TEXT-HEADER-TDID.
*      MOVE-CORRESPONDING LS_TEXT-LINES TO LT_LINE.
*      CONCATENATE LINES OF LT_LINE INTO LS_TX-TEXT
*        SEPARATED BY SPACE.
*      IF LS_TX-TEXT CA '&'.
*        REPLACE ALL OCCURRENCES OF '<(>' IN LS_TX-TEXT WITH SPACE.
*        REPLACE ALL OCCURRENCES OF '<)>' IN LS_TX-TEXT WITH SPACE.
*      ENDIF.
*      LS_TX-LINES = LS_TEXT-LINES.
*      APPEND LS_TX TO ET_TX.
*    ENDIF.
  ENDLOOP.


ENDFUNCTION.
