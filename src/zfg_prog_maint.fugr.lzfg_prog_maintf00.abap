*---------------------------------------------------------------------*
*    view related FORM routines
*---------------------------------------------------------------------*
*...processing: ZVI_ALV_LAYOUT..................................*
FORM GET_DATA_ZVI_ALV_LAYOUT.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_ALV_LAYO WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_ALV_LAYOUT .
ZVI_ALV_LAYOUT-MANDT =
ZTB_BM_ALV_LAYO-MANDT .
ZVI_ALV_LAYOUT-REPORT =
ZTB_BM_ALV_LAYO-REPORT .
ZVI_ALV_LAYOUT-FNAME =
ZTB_BM_ALV_LAYO-FNAME .
ZVI_ALV_LAYOUT-POSID =
ZTB_BM_ALV_LAYO-POSID .
ZVI_ALV_LAYOUT-TYP =
ZTB_BM_ALV_LAYO-TYP .
ZVI_ALV_LAYOUT-HKEY =
ZTB_BM_ALV_LAYO-HKEY .
ZVI_ALV_LAYOUT-PREFIX =
ZTB_BM_ALV_LAYO-PREFIX .
ZVI_ALV_LAYOUT-SUFFIX =
ZTB_BM_ALV_LAYO-SUFFIX .
ZVI_ALV_LAYOUT-IS_ITEM =
ZTB_BM_ALV_LAYO-IS_ITEM .
ZVI_ALV_LAYOUT-COLS =
ZTB_BM_ALV_LAYO-COLS .
ZVI_ALV_LAYOUT-STYLEFNAME =
ZTB_BM_ALV_LAYO-STYLEFNAME .
<VIM_TOTAL_STRUC> = ZVI_ALV_LAYOUT.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_ALV_LAYOUT .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_ALV_LAYOUT.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_ALV_LAYOUT-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_ALV_LAYO WHERE
  REPORT = ZVI_ALV_LAYOUT-REPORT AND
  FNAME = ZVI_ALV_LAYOUT-FNAME AND
  POSID = ZVI_ALV_LAYOUT-POSID .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_ALV_LAYO .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_ALV_LAYO WHERE
  REPORT = ZVI_ALV_LAYOUT-REPORT AND
  FNAME = ZVI_ALV_LAYOUT-FNAME AND
  POSID = ZVI_ALV_LAYOUT-POSID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_ALV_LAYO.
    ENDIF.
ZTB_BM_ALV_LAYO-MANDT =
ZVI_ALV_LAYOUT-MANDT .
ZTB_BM_ALV_LAYO-REPORT =
ZVI_ALV_LAYOUT-REPORT .
ZTB_BM_ALV_LAYO-FNAME =
ZVI_ALV_LAYOUT-FNAME .
ZTB_BM_ALV_LAYO-POSID =
ZVI_ALV_LAYOUT-POSID .
ZTB_BM_ALV_LAYO-TYP =
ZVI_ALV_LAYOUT-TYP .
ZTB_BM_ALV_LAYO-HKEY =
ZVI_ALV_LAYOUT-HKEY .
ZTB_BM_ALV_LAYO-PREFIX =
ZVI_ALV_LAYOUT-PREFIX .
ZTB_BM_ALV_LAYO-SUFFIX =
ZVI_ALV_LAYOUT-SUFFIX .
ZTB_BM_ALV_LAYO-IS_ITEM =
ZVI_ALV_LAYOUT-IS_ITEM .
ZTB_BM_ALV_LAYO-COLS =
ZVI_ALV_LAYOUT-COLS .
ZTB_BM_ALV_LAYO-STYLEFNAME =
ZVI_ALV_LAYOUT-STYLEFNAME .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_ALV_LAYO ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_ALV_LAYO .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_ALV_LAYOUT-UPD_FLAG,
STATUS_ZVI_ALV_LAYOUT-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_ALV_LAYOUT.
  SELECT SINGLE * FROM ZTB_BM_ALV_LAYO WHERE
REPORT = ZVI_ALV_LAYOUT-REPORT AND
FNAME = ZVI_ALV_LAYOUT-FNAME AND
POSID = ZVI_ALV_LAYOUT-POSID .
ZVI_ALV_LAYOUT-MANDT =
ZTB_BM_ALV_LAYO-MANDT .
ZVI_ALV_LAYOUT-REPORT =
ZTB_BM_ALV_LAYO-REPORT .
ZVI_ALV_LAYOUT-FNAME =
ZTB_BM_ALV_LAYO-FNAME .
ZVI_ALV_LAYOUT-POSID =
ZTB_BM_ALV_LAYO-POSID .
ZVI_ALV_LAYOUT-TYP =
ZTB_BM_ALV_LAYO-TYP .
ZVI_ALV_LAYOUT-HKEY =
ZTB_BM_ALV_LAYO-HKEY .
ZVI_ALV_LAYOUT-PREFIX =
ZTB_BM_ALV_LAYO-PREFIX .
ZVI_ALV_LAYOUT-SUFFIX =
ZTB_BM_ALV_LAYO-SUFFIX .
ZVI_ALV_LAYOUT-IS_ITEM =
ZTB_BM_ALV_LAYO-IS_ITEM .
ZVI_ALV_LAYOUT-COLS =
ZTB_BM_ALV_LAYO-COLS .
ZVI_ALV_LAYOUT-STYLEFNAME =
ZTB_BM_ALV_LAYO-STYLEFNAME .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_ALV_LAYOUT USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_ALV_LAYOUT-REPORT TO
ZTB_BM_ALV_LAYO-REPORT .
MOVE ZVI_ALV_LAYOUT-FNAME TO
ZTB_BM_ALV_LAYO-FNAME .
MOVE ZVI_ALV_LAYOUT-POSID TO
ZTB_BM_ALV_LAYO-POSID .
MOVE ZVI_ALV_LAYOUT-MANDT TO
ZTB_BM_ALV_LAYO-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_ALV_LAYO'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_ALV_LAYO TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_ALV_LAYO'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_CHA_LAYO.................................*
FORM GET_DATA_ZVI_BM_CHA_LAYO.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_CHA_LAYO WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_CHA_LAYO .
ZVI_BM_CHA_LAYO-MANDT =
ZTB_BM_CHA_LAYO-MANDT .
ZVI_BM_CHA_LAYO-REPORT =
ZTB_BM_CHA_LAYO-REPORT .
ZVI_BM_CHA_LAYO-TABNAME =
ZTB_BM_CHA_LAYO-TABNAME .
ZVI_BM_CHA_LAYO-TITLE =
ZTB_BM_CHA_LAYO-TITLE .
ZVI_BM_CHA_LAYO-CHARTTYPE =
ZTB_BM_CHA_LAYO-CHARTTYPE .
ZVI_BM_CHA_LAYO-DESIGN_MODE =
ZTB_BM_CHA_LAYO-DESIGN_MODE .
ZVI_BM_CHA_LAYO-DIMENSION =
ZTB_BM_CHA_LAYO-DIMENSION .
ZVI_BM_CHA_LAYO-CAT_FIELD =
ZTB_BM_CHA_LAYO-CAT_FIELD .
ZVI_BM_CHA_LAYO-CAT_UNIT =
ZTB_BM_CHA_LAYO-CAT_UNIT .
ZVI_BM_CHA_LAYO-CAT_TITLE =
ZTB_BM_CHA_LAYO-CAT_TITLE .
ZVI_BM_CHA_LAYO-LTITLE =
ZTB_BM_CHA_LAYO-LTITLE .
ZVI_BM_CHA_LAYO-LUNIT =
ZTB_BM_CHA_LAYO-LUNIT .
ZVI_BM_CHA_LAYO-RTITLE =
ZTB_BM_CHA_LAYO-RTITLE .
ZVI_BM_CHA_LAYO-RUNIT =
ZTB_BM_CHA_LAYO-RUNIT .
<VIM_TOTAL_STRUC> = ZVI_BM_CHA_LAYO.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_CHA_LAYO .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_CHA_LAYO.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_CHA_LAYO-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_CHA_LAYO WHERE
  REPORT = ZVI_BM_CHA_LAYO-REPORT AND
  TABNAME = ZVI_BM_CHA_LAYO-TABNAME .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_CHA_LAYO .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_CHA_LAYO WHERE
  REPORT = ZVI_BM_CHA_LAYO-REPORT AND
  TABNAME = ZVI_BM_CHA_LAYO-TABNAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_CHA_LAYO.
    ENDIF.
ZTB_BM_CHA_LAYO-MANDT =
ZVI_BM_CHA_LAYO-MANDT .
ZTB_BM_CHA_LAYO-REPORT =
ZVI_BM_CHA_LAYO-REPORT .
ZTB_BM_CHA_LAYO-TABNAME =
ZVI_BM_CHA_LAYO-TABNAME .
ZTB_BM_CHA_LAYO-TITLE =
ZVI_BM_CHA_LAYO-TITLE .
ZTB_BM_CHA_LAYO-CHARTTYPE =
ZVI_BM_CHA_LAYO-CHARTTYPE .
ZTB_BM_CHA_LAYO-DESIGN_MODE =
ZVI_BM_CHA_LAYO-DESIGN_MODE .
ZTB_BM_CHA_LAYO-DIMENSION =
ZVI_BM_CHA_LAYO-DIMENSION .
ZTB_BM_CHA_LAYO-CAT_FIELD =
ZVI_BM_CHA_LAYO-CAT_FIELD .
ZTB_BM_CHA_LAYO-CAT_UNIT =
ZVI_BM_CHA_LAYO-CAT_UNIT .
ZTB_BM_CHA_LAYO-CAT_TITLE =
ZVI_BM_CHA_LAYO-CAT_TITLE .
ZTB_BM_CHA_LAYO-LTITLE =
ZVI_BM_CHA_LAYO-LTITLE .
ZTB_BM_CHA_LAYO-LUNIT =
ZVI_BM_CHA_LAYO-LUNIT .
ZTB_BM_CHA_LAYO-RTITLE =
ZVI_BM_CHA_LAYO-RTITLE .
ZTB_BM_CHA_LAYO-RUNIT =
ZVI_BM_CHA_LAYO-RUNIT .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_CHA_LAYO ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_CHA_LAYO .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_CHA_LAYO-UPD_FLAG,
STATUS_ZVI_BM_CHA_LAYO-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_CHA_LAYO.
  SELECT SINGLE * FROM ZTB_BM_CHA_LAYO WHERE
REPORT = ZVI_BM_CHA_LAYO-REPORT AND
TABNAME = ZVI_BM_CHA_LAYO-TABNAME .
ZVI_BM_CHA_LAYO-MANDT =
ZTB_BM_CHA_LAYO-MANDT .
ZVI_BM_CHA_LAYO-REPORT =
ZTB_BM_CHA_LAYO-REPORT .
ZVI_BM_CHA_LAYO-TABNAME =
ZTB_BM_CHA_LAYO-TABNAME .
ZVI_BM_CHA_LAYO-TITLE =
ZTB_BM_CHA_LAYO-TITLE .
ZVI_BM_CHA_LAYO-CHARTTYPE =
ZTB_BM_CHA_LAYO-CHARTTYPE .
ZVI_BM_CHA_LAYO-DESIGN_MODE =
ZTB_BM_CHA_LAYO-DESIGN_MODE .
ZVI_BM_CHA_LAYO-DIMENSION =
ZTB_BM_CHA_LAYO-DIMENSION .
ZVI_BM_CHA_LAYO-CAT_FIELD =
ZTB_BM_CHA_LAYO-CAT_FIELD .
ZVI_BM_CHA_LAYO-CAT_UNIT =
ZTB_BM_CHA_LAYO-CAT_UNIT .
ZVI_BM_CHA_LAYO-CAT_TITLE =
ZTB_BM_CHA_LAYO-CAT_TITLE .
ZVI_BM_CHA_LAYO-LTITLE =
ZTB_BM_CHA_LAYO-LTITLE .
ZVI_BM_CHA_LAYO-LUNIT =
ZTB_BM_CHA_LAYO-LUNIT .
ZVI_BM_CHA_LAYO-RTITLE =
ZTB_BM_CHA_LAYO-RTITLE .
ZVI_BM_CHA_LAYO-RUNIT =
ZTB_BM_CHA_LAYO-RUNIT .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_CHA_LAYO USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_CHA_LAYO-REPORT TO
ZTB_BM_CHA_LAYO-REPORT .
MOVE ZVI_BM_CHA_LAYO-TABNAME TO
ZTB_BM_CHA_LAYO-TABNAME .
MOVE ZVI_BM_CHA_LAYO-MANDT TO
ZTB_BM_CHA_LAYO-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_CHA_LAYO'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_CHA_LAYO TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_CHA_LAYO'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_CHA_SERI.................................*
FORM GET_DATA_ZVI_BM_CHA_SERI.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_CHA_SERI WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_CHA_SERI .
ZVI_BM_CHA_SERI-MANDT =
ZTB_BM_CHA_SERI-MANDT .
ZVI_BM_CHA_SERI-REPORT =
ZTB_BM_CHA_SERI-REPORT .
ZVI_BM_CHA_SERI-TABNAME =
ZTB_BM_CHA_SERI-TABNAME .
ZVI_BM_CHA_SERI-SERI_FIELD =
ZTB_BM_CHA_SERI-SERI_FIELD .
ZVI_BM_CHA_SERI-SERI_TITLE =
ZTB_BM_CHA_SERI-SERI_TITLE .
ZVI_BM_CHA_SERI-SERI_COLOR =
ZTB_BM_CHA_SERI-SERI_COLOR .
ZVI_BM_CHA_SERI-SERI_UNIT =
ZTB_BM_CHA_SERI-SERI_UNIT .
<VIM_TOTAL_STRUC> = ZVI_BM_CHA_SERI.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_CHA_SERI .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_CHA_SERI.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_CHA_SERI-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_CHA_SERI WHERE
  REPORT = ZVI_BM_CHA_SERI-REPORT AND
  TABNAME = ZVI_BM_CHA_SERI-TABNAME AND
  SERI_FIELD = ZVI_BM_CHA_SERI-SERI_FIELD .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_CHA_SERI .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_CHA_SERI WHERE
  REPORT = ZVI_BM_CHA_SERI-REPORT AND
  TABNAME = ZVI_BM_CHA_SERI-TABNAME AND
  SERI_FIELD = ZVI_BM_CHA_SERI-SERI_FIELD .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_CHA_SERI.
    ENDIF.
ZTB_BM_CHA_SERI-MANDT =
ZVI_BM_CHA_SERI-MANDT .
ZTB_BM_CHA_SERI-REPORT =
ZVI_BM_CHA_SERI-REPORT .
ZTB_BM_CHA_SERI-TABNAME =
ZVI_BM_CHA_SERI-TABNAME .
ZTB_BM_CHA_SERI-SERI_FIELD =
ZVI_BM_CHA_SERI-SERI_FIELD .
ZTB_BM_CHA_SERI-SERI_TITLE =
ZVI_BM_CHA_SERI-SERI_TITLE .
ZTB_BM_CHA_SERI-SERI_COLOR =
ZVI_BM_CHA_SERI-SERI_COLOR .
ZTB_BM_CHA_SERI-SERI_UNIT =
ZVI_BM_CHA_SERI-SERI_UNIT .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_CHA_SERI ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_CHA_SERI .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_CHA_SERI-UPD_FLAG,
STATUS_ZVI_BM_CHA_SERI-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_CHA_SERI.
  SELECT SINGLE * FROM ZTB_BM_CHA_SERI WHERE
REPORT = ZVI_BM_CHA_SERI-REPORT AND
TABNAME = ZVI_BM_CHA_SERI-TABNAME AND
SERI_FIELD = ZVI_BM_CHA_SERI-SERI_FIELD .
ZVI_BM_CHA_SERI-MANDT =
ZTB_BM_CHA_SERI-MANDT .
ZVI_BM_CHA_SERI-REPORT =
ZTB_BM_CHA_SERI-REPORT .
ZVI_BM_CHA_SERI-TABNAME =
ZTB_BM_CHA_SERI-TABNAME .
ZVI_BM_CHA_SERI-SERI_FIELD =
ZTB_BM_CHA_SERI-SERI_FIELD .
ZVI_BM_CHA_SERI-SERI_TITLE =
ZTB_BM_CHA_SERI-SERI_TITLE .
ZVI_BM_CHA_SERI-SERI_COLOR =
ZTB_BM_CHA_SERI-SERI_COLOR .
ZVI_BM_CHA_SERI-SERI_UNIT =
ZTB_BM_CHA_SERI-SERI_UNIT .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_CHA_SERI USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_CHA_SERI-REPORT TO
ZTB_BM_CHA_SERI-REPORT .
MOVE ZVI_BM_CHA_SERI-TABNAME TO
ZTB_BM_CHA_SERI-TABNAME .
MOVE ZVI_BM_CHA_SERI-SERI_FIELD TO
ZTB_BM_CHA_SERI-SERI_FIELD .
MOVE ZVI_BM_CHA_SERI-MANDT TO
ZTB_BM_CHA_SERI-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_CHA_SERI'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_CHA_SERI TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_CHA_SERI'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_DATCON...................................*
FORM GET_DATA_ZVI_BM_DATCON.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_DATCON WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_DATCON .
ZVI_BM_DATCON-MANDT =
ZTB_BM_DATCON-MANDT .
ZVI_BM_DATCON-DATGR =
ZTB_BM_DATCON-DATGR .
ZVI_BM_DATCON-DATTY =
ZTB_BM_DATCON-DATTY .
ZVI_BM_DATCON-DATCON =
ZTB_BM_DATCON-DATCON .
ZVI_BM_DATCON-FIELD1 =
ZTB_BM_DATCON-FIELD1 .
ZVI_BM_DATCON-VALUE1 =
ZTB_BM_DATCON-VALUE1 .
ZVI_BM_DATCON-FIELD2 =
ZTB_BM_DATCON-FIELD2 .
ZVI_BM_DATCON-VALUE2 =
ZTB_BM_DATCON-VALUE2 .
ZVI_BM_DATCON-FIELD3 =
ZTB_BM_DATCON-FIELD3 .
ZVI_BM_DATCON-VALUE3 =
ZTB_BM_DATCON-VALUE3 .
<VIM_TOTAL_STRUC> = ZVI_BM_DATCON.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_DATCON .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_DATCON.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_DATCON-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_DATCON WHERE
  DATGR = ZVI_BM_DATCON-DATGR AND
  DATTY = ZVI_BM_DATCON-DATTY AND
  DATCON = ZVI_BM_DATCON-DATCON .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_DATCON .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_DATCON WHERE
  DATGR = ZVI_BM_DATCON-DATGR AND
  DATTY = ZVI_BM_DATCON-DATTY AND
  DATCON = ZVI_BM_DATCON-DATCON .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_DATCON.
    ENDIF.
ZTB_BM_DATCON-MANDT =
ZVI_BM_DATCON-MANDT .
ZTB_BM_DATCON-DATGR =
ZVI_BM_DATCON-DATGR .
ZTB_BM_DATCON-DATTY =
ZVI_BM_DATCON-DATTY .
ZTB_BM_DATCON-DATCON =
ZVI_BM_DATCON-DATCON .
ZTB_BM_DATCON-FIELD1 =
ZVI_BM_DATCON-FIELD1 .
ZTB_BM_DATCON-VALUE1 =
ZVI_BM_DATCON-VALUE1 .
ZTB_BM_DATCON-FIELD2 =
ZVI_BM_DATCON-FIELD2 .
ZTB_BM_DATCON-VALUE2 =
ZVI_BM_DATCON-VALUE2 .
ZTB_BM_DATCON-FIELD3 =
ZVI_BM_DATCON-FIELD3 .
ZTB_BM_DATCON-VALUE3 =
ZVI_BM_DATCON-VALUE3 .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_DATCON ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_DATCON .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_DATCON-UPD_FLAG,
STATUS_ZVI_BM_DATCON-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_DATCON.
  SELECT SINGLE * FROM ZTB_BM_DATCON WHERE
DATGR = ZVI_BM_DATCON-DATGR AND
DATTY = ZVI_BM_DATCON-DATTY AND
DATCON = ZVI_BM_DATCON-DATCON .
ZVI_BM_DATCON-MANDT =
ZTB_BM_DATCON-MANDT .
ZVI_BM_DATCON-DATGR =
ZTB_BM_DATCON-DATGR .
ZVI_BM_DATCON-DATTY =
ZTB_BM_DATCON-DATTY .
ZVI_BM_DATCON-DATCON =
ZTB_BM_DATCON-DATCON .
ZVI_BM_DATCON-FIELD1 =
ZTB_BM_DATCON-FIELD1 .
ZVI_BM_DATCON-VALUE1 =
ZTB_BM_DATCON-VALUE1 .
ZVI_BM_DATCON-FIELD2 =
ZTB_BM_DATCON-FIELD2 .
ZVI_BM_DATCON-VALUE2 =
ZTB_BM_DATCON-VALUE2 .
ZVI_BM_DATCON-FIELD3 =
ZTB_BM_DATCON-FIELD3 .
ZVI_BM_DATCON-VALUE3 =
ZTB_BM_DATCON-VALUE3 .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_DATCON USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_DATCON-DATGR TO
ZTB_BM_DATCON-DATGR .
MOVE ZVI_BM_DATCON-DATTY TO
ZTB_BM_DATCON-DATTY .
MOVE ZVI_BM_DATCON-DATCON TO
ZTB_BM_DATCON-DATCON .
MOVE ZVI_BM_DATCON-MANDT TO
ZTB_BM_DATCON-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_DATCON'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_DATCON TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_DATCON'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_DF_FIELD.................................*
FORM GET_DATA_ZVI_BM_DF_FIELD.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_DF_FIELD WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_DF_FIELD .
ZVI_BM_DF_FIELD-MANDT =
ZTB_BM_DF_FIELD-MANDT .
ZVI_BM_DF_FIELD-TABNM =
ZTB_BM_DF_FIELD-TABNM .
ZVI_BM_DF_FIELD-FPOSI =
ZTB_BM_DF_FIELD-FPOSI .
ZVI_BM_DF_FIELD-FNAME =
ZTB_BM_DF_FIELD-FNAME .
ZVI_BM_DF_FIELD-ROWTYP =
ZTB_BM_DF_FIELD-ROWTYP .
ZVI_BM_DF_FIELD-CHKGRP =
ZTB_BM_DF_FIELD-CHKGRP .
ZVI_BM_DF_FIELD-TYPEID =
ZTB_BM_DF_FIELD-TYPEID .
ZVI_BM_DF_FIELD-CHKINIT =
ZTB_BM_DF_FIELD-CHKINIT .
ZVI_BM_DF_FIELD-LENGTH =
ZTB_BM_DF_FIELD-LENGTH .
ZVI_BM_DF_FIELD-EHFUNC =
ZTB_BM_DF_FIELD-EHFUNC .
ZVI_BM_DF_FIELD-DESCR =
ZTB_BM_DF_FIELD-DESCR .
    SELECT SINGLE * FROM ZTB_BM_DF_TYP WHERE
TYPEID = ZTB_BM_DF_FIELD-TYPEID .
    IF SY-SUBRC EQ 0.
ZVI_BM_DF_FIELD-CHKTYP =
ZTB_BM_DF_TYP-CHKTYP .
ZVI_BM_DF_FIELD-CFORMAT =
ZTB_BM_DF_TYP-CFORMAT .
ZVI_BM_DF_FIELD-FUNCNAME =
ZTB_BM_DF_TYP-FUNCNAME .
    ENDIF.
<VIM_TOTAL_STRUC> = ZVI_BM_DF_FIELD.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_DF_FIELD .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_DF_FIELD.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_DF_FIELD-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_DF_FIELD WHERE
  TABNM = ZVI_BM_DF_FIELD-TABNM AND
  FPOSI = ZVI_BM_DF_FIELD-FPOSI .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_DF_FIELD .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_DF_FIELD WHERE
  TABNM = ZVI_BM_DF_FIELD-TABNM AND
  FPOSI = ZVI_BM_DF_FIELD-FPOSI .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_DF_FIELD.
    ENDIF.
ZTB_BM_DF_FIELD-MANDT =
ZVI_BM_DF_FIELD-MANDT .
ZTB_BM_DF_FIELD-TABNM =
ZVI_BM_DF_FIELD-TABNM .
ZTB_BM_DF_FIELD-FPOSI =
ZVI_BM_DF_FIELD-FPOSI .
ZTB_BM_DF_FIELD-FNAME =
ZVI_BM_DF_FIELD-FNAME .
ZTB_BM_DF_FIELD-ROWTYP =
ZVI_BM_DF_FIELD-ROWTYP .
ZTB_BM_DF_FIELD-CHKGRP =
ZVI_BM_DF_FIELD-CHKGRP .
ZTB_BM_DF_FIELD-TYPEID =
ZVI_BM_DF_FIELD-TYPEID .
ZTB_BM_DF_FIELD-CHKINIT =
ZVI_BM_DF_FIELD-CHKINIT .
ZTB_BM_DF_FIELD-LENGTH =
ZVI_BM_DF_FIELD-LENGTH .
ZTB_BM_DF_FIELD-EHFUNC =
ZVI_BM_DF_FIELD-EHFUNC .
ZTB_BM_DF_FIELD-DESCR =
ZVI_BM_DF_FIELD-DESCR .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_DF_FIELD ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_DF_FIELD .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_DF_FIELD-UPD_FLAG,
STATUS_ZVI_BM_DF_FIELD-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_DF_FIELD.
  SELECT SINGLE * FROM ZTB_BM_DF_FIELD WHERE
TABNM = ZVI_BM_DF_FIELD-TABNM AND
FPOSI = ZVI_BM_DF_FIELD-FPOSI .
ZVI_BM_DF_FIELD-MANDT =
ZTB_BM_DF_FIELD-MANDT .
ZVI_BM_DF_FIELD-TABNM =
ZTB_BM_DF_FIELD-TABNM .
ZVI_BM_DF_FIELD-FPOSI =
ZTB_BM_DF_FIELD-FPOSI .
ZVI_BM_DF_FIELD-FNAME =
ZTB_BM_DF_FIELD-FNAME .
ZVI_BM_DF_FIELD-ROWTYP =
ZTB_BM_DF_FIELD-ROWTYP .
ZVI_BM_DF_FIELD-CHKGRP =
ZTB_BM_DF_FIELD-CHKGRP .
ZVI_BM_DF_FIELD-TYPEID =
ZTB_BM_DF_FIELD-TYPEID .
ZVI_BM_DF_FIELD-CHKINIT =
ZTB_BM_DF_FIELD-CHKINIT .
ZVI_BM_DF_FIELD-LENGTH =
ZTB_BM_DF_FIELD-LENGTH .
ZVI_BM_DF_FIELD-EHFUNC =
ZTB_BM_DF_FIELD-EHFUNC .
ZVI_BM_DF_FIELD-DESCR =
ZTB_BM_DF_FIELD-DESCR .
    SELECT SINGLE * FROM ZTB_BM_DF_TYP WHERE
TYPEID = ZTB_BM_DF_FIELD-TYPEID .
    IF SY-SUBRC EQ 0.
ZVI_BM_DF_FIELD-CHKTYP =
ZTB_BM_DF_TYP-CHKTYP .
ZVI_BM_DF_FIELD-CFORMAT =
ZTB_BM_DF_TYP-CFORMAT .
ZVI_BM_DF_FIELD-FUNCNAME =
ZTB_BM_DF_TYP-FUNCNAME .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_DF_FIELD-CHKTYP .
      CLEAR ZVI_BM_DF_FIELD-CFORMAT .
      CLEAR ZVI_BM_DF_FIELD-FUNCNAME .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_DF_FIELD USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_DF_FIELD-TABNM TO
ZTB_BM_DF_FIELD-TABNM .
MOVE ZVI_BM_DF_FIELD-FPOSI TO
ZTB_BM_DF_FIELD-FPOSI .
MOVE ZVI_BM_DF_FIELD-MANDT TO
ZTB_BM_DF_FIELD-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_DF_FIELD'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_DF_FIELD TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_DF_FIELD'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZVI_BM_DF_FIELD USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZTB_BM_DF_FIELD-MANDT =
ZVI_BM_DF_FIELD-MANDT .
ZTB_BM_DF_FIELD-TABNM =
ZVI_BM_DF_FIELD-TABNM .
ZTB_BM_DF_FIELD-FPOSI =
ZVI_BM_DF_FIELD-FPOSI .
ZTB_BM_DF_FIELD-FNAME =
ZVI_BM_DF_FIELD-FNAME .
ZTB_BM_DF_FIELD-ROWTYP =
ZVI_BM_DF_FIELD-ROWTYP .
ZTB_BM_DF_FIELD-CHKGRP =
ZVI_BM_DF_FIELD-CHKGRP .
ZTB_BM_DF_FIELD-TYPEID =
ZVI_BM_DF_FIELD-TYPEID .
ZTB_BM_DF_FIELD-CHKINIT =
ZVI_BM_DF_FIELD-CHKINIT .
ZTB_BM_DF_FIELD-LENGTH =
ZVI_BM_DF_FIELD-LENGTH .
ZTB_BM_DF_FIELD-EHFUNC =
ZVI_BM_DF_FIELD-EHFUNC .
ZTB_BM_DF_FIELD-DESCR =
ZVI_BM_DF_FIELD-DESCR .
    SELECT SINGLE * FROM ZTB_BM_DF_TYP WHERE
TYPEID = ZTB_BM_DF_FIELD-TYPEID .
    IF SY-SUBRC EQ 0.
ZVI_BM_DF_FIELD-CHKTYP =
ZTB_BM_DF_TYP-CHKTYP .
ZVI_BM_DF_FIELD-CFORMAT =
ZTB_BM_DF_TYP-CFORMAT .
ZVI_BM_DF_FIELD-FUNCNAME =
ZTB_BM_DF_TYP-FUNCNAME .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_DF_FIELD-CHKTYP .
      CLEAR ZVI_BM_DF_FIELD-CFORMAT .
      CLEAR ZVI_BM_DF_FIELD-FUNCNAME .
    ENDIF.
ENDFORM.
*...processing: ZVI_BM_DF_TYPLS.................................*
FORM GET_DATA_ZVI_BM_DF_TYPLS.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_DF_TYPLS WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_DF_TYPLS .
ZVI_BM_DF_TYPLS-MANDT =
ZTB_BM_DF_TYPLS-MANDT .
ZVI_BM_DF_TYPLS-TYPEID =
ZTB_BM_DF_TYPLS-TYPEID .
ZVI_BM_DF_TYPLS-VALUE =
ZTB_BM_DF_TYPLS-VALUE .
ZVI_BM_DF_TYPLS-OUTVAL =
ZTB_BM_DF_TYPLS-OUTVAL .
ZVI_BM_DF_TYPLS-DESCR =
ZTB_BM_DF_TYPLS-DESCR .
<VIM_TOTAL_STRUC> = ZVI_BM_DF_TYPLS.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_DF_TYPLS .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_DF_TYPLS.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_DF_TYPLS-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_DF_TYPLS WHERE
  TYPEID = ZVI_BM_DF_TYPLS-TYPEID AND
  VALUE = ZVI_BM_DF_TYPLS-VALUE .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_DF_TYPLS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_DF_TYPLS WHERE
  TYPEID = ZVI_BM_DF_TYPLS-TYPEID AND
  VALUE = ZVI_BM_DF_TYPLS-VALUE .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_DF_TYPLS.
    ENDIF.
ZTB_BM_DF_TYPLS-MANDT =
ZVI_BM_DF_TYPLS-MANDT .
ZTB_BM_DF_TYPLS-TYPEID =
ZVI_BM_DF_TYPLS-TYPEID .
ZTB_BM_DF_TYPLS-VALUE =
ZVI_BM_DF_TYPLS-VALUE .
ZTB_BM_DF_TYPLS-OUTVAL =
ZVI_BM_DF_TYPLS-OUTVAL .
ZTB_BM_DF_TYPLS-DESCR =
ZVI_BM_DF_TYPLS-DESCR .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_DF_TYPLS ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_DF_TYPLS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_DF_TYPLS-UPD_FLAG,
STATUS_ZVI_BM_DF_TYPLS-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_DF_TYPLS.
  SELECT SINGLE * FROM ZTB_BM_DF_TYPLS WHERE
TYPEID = ZVI_BM_DF_TYPLS-TYPEID AND
VALUE = ZVI_BM_DF_TYPLS-VALUE .
ZVI_BM_DF_TYPLS-MANDT =
ZTB_BM_DF_TYPLS-MANDT .
ZVI_BM_DF_TYPLS-TYPEID =
ZTB_BM_DF_TYPLS-TYPEID .
ZVI_BM_DF_TYPLS-VALUE =
ZTB_BM_DF_TYPLS-VALUE .
ZVI_BM_DF_TYPLS-OUTVAL =
ZTB_BM_DF_TYPLS-OUTVAL .
ZVI_BM_DF_TYPLS-DESCR =
ZTB_BM_DF_TYPLS-DESCR .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_DF_TYPLS USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_DF_TYPLS-TYPEID TO
ZTB_BM_DF_TYPLS-TYPEID .
MOVE ZVI_BM_DF_TYPLS-VALUE TO
ZTB_BM_DF_TYPLS-VALUE .
MOVE ZVI_BM_DF_TYPLS-MANDT TO
ZTB_BM_DF_TYPLS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_DF_TYPLS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_DF_TYPLS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_DF_TYPLS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_DF_TYP_EC................................*
FORM GET_DATA_ZVI_BM_DF_TYP_EC.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_DF_TYP_EC WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_DF_TYP_EC .
ZVI_BM_DF_TYP_EC-MANDT =
ZTB_BM_DF_TYP_EC-MANDT .
ZVI_BM_DF_TYP_EC-TYPEID =
ZTB_BM_DF_TYP_EC-TYPEID .
ZVI_BM_DF_TYP_EC-EINIT =
ZTB_BM_DF_TYP_EC-EINIT .
ZVI_BM_DF_TYP_EC-ELENG =
ZTB_BM_DF_TYP_EC-ELENG .
ZVI_BM_DF_TYP_EC-EFMAT =
ZTB_BM_DF_TYP_EC-EFMAT .
ZVI_BM_DF_TYP_EC-EVLDB =
ZTB_BM_DF_TYP_EC-EVLDB .
ZVI_BM_DF_TYP_EC-MSGID =
ZTB_BM_DF_TYP_EC-MSGID .
ZVI_BM_DF_TYP_EC-ENUMB =
ZTB_BM_DF_TYP_EC-ENUMB .
ZVI_BM_DF_TYP_EC-ECTYP =
ZTB_BM_DF_TYP_EC-ECTYP .
ZVI_BM_DF_TYP_EC-ECGRP =
ZTB_BM_DF_TYP_EC-ECGRP .
ZVI_BM_DF_TYP_EC-ECODE =
ZTB_BM_DF_TYP_EC-ECODE .
<VIM_TOTAL_STRUC> = ZVI_BM_DF_TYP_EC.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_DF_TYP_EC .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_DF_TYP_EC.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_DF_TYP_EC-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_DF_TYP_EC WHERE
  TYPEID = ZVI_BM_DF_TYP_EC-TYPEID AND
  EINIT = ZVI_BM_DF_TYP_EC-EINIT AND
  ELENG = ZVI_BM_DF_TYP_EC-ELENG AND
  EFMAT = ZVI_BM_DF_TYP_EC-EFMAT AND
  EVLDB = ZVI_BM_DF_TYP_EC-EVLDB AND
  MSGID = ZVI_BM_DF_TYP_EC-MSGID AND
  ENUMB = ZVI_BM_DF_TYP_EC-ENUMB .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_DF_TYP_EC .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_DF_TYP_EC WHERE
  TYPEID = ZVI_BM_DF_TYP_EC-TYPEID AND
  EINIT = ZVI_BM_DF_TYP_EC-EINIT AND
  ELENG = ZVI_BM_DF_TYP_EC-ELENG AND
  EFMAT = ZVI_BM_DF_TYP_EC-EFMAT AND
  EVLDB = ZVI_BM_DF_TYP_EC-EVLDB AND
  MSGID = ZVI_BM_DF_TYP_EC-MSGID AND
  ENUMB = ZVI_BM_DF_TYP_EC-ENUMB .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_DF_TYP_EC.
    ENDIF.
ZTB_BM_DF_TYP_EC-MANDT =
ZVI_BM_DF_TYP_EC-MANDT .
ZTB_BM_DF_TYP_EC-TYPEID =
ZVI_BM_DF_TYP_EC-TYPEID .
ZTB_BM_DF_TYP_EC-EINIT =
ZVI_BM_DF_TYP_EC-EINIT .
ZTB_BM_DF_TYP_EC-ELENG =
ZVI_BM_DF_TYP_EC-ELENG .
ZTB_BM_DF_TYP_EC-EFMAT =
ZVI_BM_DF_TYP_EC-EFMAT .
ZTB_BM_DF_TYP_EC-EVLDB =
ZVI_BM_DF_TYP_EC-EVLDB .
ZTB_BM_DF_TYP_EC-MSGID =
ZVI_BM_DF_TYP_EC-MSGID .
ZTB_BM_DF_TYP_EC-ENUMB =
ZVI_BM_DF_TYP_EC-ENUMB .
ZTB_BM_DF_TYP_EC-ECTYP =
ZVI_BM_DF_TYP_EC-ECTYP .
ZTB_BM_DF_TYP_EC-ECGRP =
ZVI_BM_DF_TYP_EC-ECGRP .
ZTB_BM_DF_TYP_EC-ECODE =
ZVI_BM_DF_TYP_EC-ECODE .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_DF_TYP_EC ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_DF_TYP_EC .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_DF_TYP_EC-UPD_FLAG,
STATUS_ZVI_BM_DF_TYP_EC-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_DF_TYP_EC.
  SELECT SINGLE * FROM ZTB_BM_DF_TYP_EC WHERE
TYPEID = ZVI_BM_DF_TYP_EC-TYPEID AND
EINIT = ZVI_BM_DF_TYP_EC-EINIT AND
ELENG = ZVI_BM_DF_TYP_EC-ELENG AND
EFMAT = ZVI_BM_DF_TYP_EC-EFMAT AND
EVLDB = ZVI_BM_DF_TYP_EC-EVLDB AND
MSGID = ZVI_BM_DF_TYP_EC-MSGID AND
ENUMB = ZVI_BM_DF_TYP_EC-ENUMB .
ZVI_BM_DF_TYP_EC-MANDT =
ZTB_BM_DF_TYP_EC-MANDT .
ZVI_BM_DF_TYP_EC-TYPEID =
ZTB_BM_DF_TYP_EC-TYPEID .
ZVI_BM_DF_TYP_EC-EINIT =
ZTB_BM_DF_TYP_EC-EINIT .
ZVI_BM_DF_TYP_EC-ELENG =
ZTB_BM_DF_TYP_EC-ELENG .
ZVI_BM_DF_TYP_EC-EFMAT =
ZTB_BM_DF_TYP_EC-EFMAT .
ZVI_BM_DF_TYP_EC-EVLDB =
ZTB_BM_DF_TYP_EC-EVLDB .
ZVI_BM_DF_TYP_EC-MSGID =
ZTB_BM_DF_TYP_EC-MSGID .
ZVI_BM_DF_TYP_EC-ENUMB =
ZTB_BM_DF_TYP_EC-ENUMB .
ZVI_BM_DF_TYP_EC-ECTYP =
ZTB_BM_DF_TYP_EC-ECTYP .
ZVI_BM_DF_TYP_EC-ECGRP =
ZTB_BM_DF_TYP_EC-ECGRP .
ZVI_BM_DF_TYP_EC-ECODE =
ZTB_BM_DF_TYP_EC-ECODE .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_DF_TYP_EC USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_DF_TYP_EC-TYPEID TO
ZTB_BM_DF_TYP_EC-TYPEID .
MOVE ZVI_BM_DF_TYP_EC-EINIT TO
ZTB_BM_DF_TYP_EC-EINIT .
MOVE ZVI_BM_DF_TYP_EC-ELENG TO
ZTB_BM_DF_TYP_EC-ELENG .
MOVE ZVI_BM_DF_TYP_EC-EFMAT TO
ZTB_BM_DF_TYP_EC-EFMAT .
MOVE ZVI_BM_DF_TYP_EC-EVLDB TO
ZTB_BM_DF_TYP_EC-EVLDB .
MOVE ZVI_BM_DF_TYP_EC-MSGID TO
ZTB_BM_DF_TYP_EC-MSGID .
MOVE ZVI_BM_DF_TYP_EC-ENUMB TO
ZTB_BM_DF_TYP_EC-ENUMB .
MOVE ZVI_BM_DF_TYP_EC-MANDT TO
ZTB_BM_DF_TYP_EC-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_DF_TYP_EC'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_DF_TYP_EC TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_DF_TYP_EC'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_PROG_ROLE................................*
FORM GET_DATA_ZVI_BM_PROG_ROLE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_PROG_ROLE WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_PROG_ROLE .
ZVI_BM_PROG_ROLE-MANDT =
ZTB_BM_PROG_ROLE-MANDT .
ZVI_BM_PROG_ROLE-REPID =
ZTB_BM_PROG_ROLE-REPID .
ZVI_BM_PROG_ROLE-BMROLE =
ZTB_BM_PROG_ROLE-BMROLE .
    SELECT SINGLE * FROM ZTB_BM_ROLE WHERE
BMROLE = ZTB_BM_PROG_ROLE-BMROLE .
    IF SY-SUBRC EQ 0.
ZVI_BM_PROG_ROLE-BMROLENM =
ZTB_BM_ROLE-BMROLENM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZVI_BM_PROG_ROLE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_PROG_ROLE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_PROG_ROLE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_PROG_ROLE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_PROG_ROLE WHERE
  REPID = ZVI_BM_PROG_ROLE-REPID AND
  BMROLE = ZVI_BM_PROG_ROLE-BMROLE .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_PROG_ROLE .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_PROG_ROLE WHERE
  REPID = ZVI_BM_PROG_ROLE-REPID AND
  BMROLE = ZVI_BM_PROG_ROLE-BMROLE .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_PROG_ROLE.
    ENDIF.
ZTB_BM_PROG_ROLE-MANDT =
ZVI_BM_PROG_ROLE-MANDT .
ZTB_BM_PROG_ROLE-REPID =
ZVI_BM_PROG_ROLE-REPID .
ZTB_BM_PROG_ROLE-BMROLE =
ZVI_BM_PROG_ROLE-BMROLE .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_PROG_ROLE ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_PROG_ROLE .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_PROG_ROLE-UPD_FLAG,
STATUS_ZVI_BM_PROG_ROLE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_PROG_ROLE.
  SELECT SINGLE * FROM ZTB_BM_PROG_ROLE WHERE
REPID = ZVI_BM_PROG_ROLE-REPID AND
BMROLE = ZVI_BM_PROG_ROLE-BMROLE .
ZVI_BM_PROG_ROLE-MANDT =
ZTB_BM_PROG_ROLE-MANDT .
ZVI_BM_PROG_ROLE-REPID =
ZTB_BM_PROG_ROLE-REPID .
ZVI_BM_PROG_ROLE-BMROLE =
ZTB_BM_PROG_ROLE-BMROLE .
    SELECT SINGLE * FROM ZTB_BM_ROLE WHERE
BMROLE = ZTB_BM_PROG_ROLE-BMROLE .
    IF SY-SUBRC EQ 0.
ZVI_BM_PROG_ROLE-BMROLENM =
ZTB_BM_ROLE-BMROLENM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_PROG_ROLE-BMROLENM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_PROG_ROLE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_PROG_ROLE-REPID TO
ZTB_BM_PROG_ROLE-REPID .
MOVE ZVI_BM_PROG_ROLE-BMROLE TO
ZTB_BM_PROG_ROLE-BMROLE .
MOVE ZVI_BM_PROG_ROLE-MANDT TO
ZTB_BM_PROG_ROLE-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_PROG_ROLE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_PROG_ROLE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_PROG_ROLE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZVI_BM_PROG_ROLE USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZTB_BM_PROG_ROLE-MANDT =
ZVI_BM_PROG_ROLE-MANDT .
ZTB_BM_PROG_ROLE-REPID =
ZVI_BM_PROG_ROLE-REPID .
ZTB_BM_PROG_ROLE-BMROLE =
ZVI_BM_PROG_ROLE-BMROLE .
    SELECT SINGLE * FROM ZTB_BM_ROLE WHERE
BMROLE = ZTB_BM_PROG_ROLE-BMROLE .
    IF SY-SUBRC EQ 0.
ZVI_BM_PROG_ROLE-BMROLENM =
ZTB_BM_ROLE-BMROLENM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_PROG_ROLE-BMROLENM .
    ENDIF.
ENDFORM.
*...processing: ZVI_BM_ROLE_FLD.................................*
FORM GET_DATA_ZVI_BM_ROLE_FLD.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_ROLE_FLD WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_ROLE_FLD .
ZVI_BM_ROLE_FLD-MANDT =
ZTB_BM_ROLE_FLD-MANDT .
ZVI_BM_ROLE_FLD-REPID =
ZTB_BM_ROLE_FLD-REPID .
ZVI_BM_ROLE_FLD-BMROLE =
ZTB_BM_ROLE_FLD-BMROLE .
ZVI_BM_ROLE_FLD-TABNM =
ZTB_BM_ROLE_FLD-TABNM .
ZVI_BM_ROLE_FLD-FIELDNAME =
ZTB_BM_ROLE_FLD-FIELDNAME .
ZVI_BM_ROLE_FLD-STRUC =
ZTB_BM_ROLE_FLD-STRUC .
ZVI_BM_ROLE_FLD-FIELDSTS =
ZTB_BM_ROLE_FLD-FIELDSTS .
ZVI_BM_ROLE_FLD-TABCONTROL =
ZTB_BM_ROLE_FLD-TABCONTROL .
    SELECT SINGLE * FROM ZTB_BM_ROLE WHERE
BMROLE = ZTB_BM_ROLE_FLD-BMROLE .
    IF SY-SUBRC EQ 0.
ZVI_BM_ROLE_FLD-BMROLENM =
ZTB_BM_ROLE-BMROLENM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZVI_BM_ROLE_FLD.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_ROLE_FLD .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_ROLE_FLD.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_ROLE_FLD-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_ROLE_FLD WHERE
  REPID = ZVI_BM_ROLE_FLD-REPID AND
  BMROLE = ZVI_BM_ROLE_FLD-BMROLE AND
  TABNM = ZVI_BM_ROLE_FLD-TABNM AND
  FIELDNAME = ZVI_BM_ROLE_FLD-FIELDNAME .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_ROLE_FLD .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_ROLE_FLD WHERE
  REPID = ZVI_BM_ROLE_FLD-REPID AND
  BMROLE = ZVI_BM_ROLE_FLD-BMROLE AND
  TABNM = ZVI_BM_ROLE_FLD-TABNM AND
  FIELDNAME = ZVI_BM_ROLE_FLD-FIELDNAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_ROLE_FLD.
    ENDIF.
ZTB_BM_ROLE_FLD-MANDT =
ZVI_BM_ROLE_FLD-MANDT .
ZTB_BM_ROLE_FLD-REPID =
ZVI_BM_ROLE_FLD-REPID .
ZTB_BM_ROLE_FLD-BMROLE =
ZVI_BM_ROLE_FLD-BMROLE .
ZTB_BM_ROLE_FLD-TABNM =
ZVI_BM_ROLE_FLD-TABNM .
ZTB_BM_ROLE_FLD-FIELDNAME =
ZVI_BM_ROLE_FLD-FIELDNAME .
ZTB_BM_ROLE_FLD-STRUC =
ZVI_BM_ROLE_FLD-STRUC .
ZTB_BM_ROLE_FLD-FIELDSTS =
ZVI_BM_ROLE_FLD-FIELDSTS .
ZTB_BM_ROLE_FLD-TABCONTROL =
ZVI_BM_ROLE_FLD-TABCONTROL .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_ROLE_FLD ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_ROLE_FLD .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_ROLE_FLD-UPD_FLAG,
STATUS_ZVI_BM_ROLE_FLD-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_ROLE_FLD.
  SELECT SINGLE * FROM ZTB_BM_ROLE_FLD WHERE
REPID = ZVI_BM_ROLE_FLD-REPID AND
BMROLE = ZVI_BM_ROLE_FLD-BMROLE AND
TABNM = ZVI_BM_ROLE_FLD-TABNM AND
FIELDNAME = ZVI_BM_ROLE_FLD-FIELDNAME .
ZVI_BM_ROLE_FLD-MANDT =
ZTB_BM_ROLE_FLD-MANDT .
ZVI_BM_ROLE_FLD-REPID =
ZTB_BM_ROLE_FLD-REPID .
ZVI_BM_ROLE_FLD-BMROLE =
ZTB_BM_ROLE_FLD-BMROLE .
ZVI_BM_ROLE_FLD-TABNM =
ZTB_BM_ROLE_FLD-TABNM .
ZVI_BM_ROLE_FLD-FIELDNAME =
ZTB_BM_ROLE_FLD-FIELDNAME .
ZVI_BM_ROLE_FLD-STRUC =
ZTB_BM_ROLE_FLD-STRUC .
ZVI_BM_ROLE_FLD-FIELDSTS =
ZTB_BM_ROLE_FLD-FIELDSTS .
ZVI_BM_ROLE_FLD-TABCONTROL =
ZTB_BM_ROLE_FLD-TABCONTROL .
    SELECT SINGLE * FROM ZTB_BM_ROLE WHERE
BMROLE = ZTB_BM_ROLE_FLD-BMROLE .
    IF SY-SUBRC EQ 0.
ZVI_BM_ROLE_FLD-BMROLENM =
ZTB_BM_ROLE-BMROLENM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_ROLE_FLD-BMROLENM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_ROLE_FLD USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_ROLE_FLD-REPID TO
ZTB_BM_ROLE_FLD-REPID .
MOVE ZVI_BM_ROLE_FLD-BMROLE TO
ZTB_BM_ROLE_FLD-BMROLE .
MOVE ZVI_BM_ROLE_FLD-TABNM TO
ZTB_BM_ROLE_FLD-TABNM .
MOVE ZVI_BM_ROLE_FLD-FIELDNAME TO
ZTB_BM_ROLE_FLD-FIELDNAME .
MOVE ZVI_BM_ROLE_FLD-MANDT TO
ZTB_BM_ROLE_FLD-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_ROLE_FLD'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_ROLE_FLD TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_ROLE_FLD'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZVI_BM_ROLE_FLD USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZTB_BM_ROLE_FLD-MANDT =
ZVI_BM_ROLE_FLD-MANDT .
ZTB_BM_ROLE_FLD-REPID =
ZVI_BM_ROLE_FLD-REPID .
ZTB_BM_ROLE_FLD-BMROLE =
ZVI_BM_ROLE_FLD-BMROLE .
ZTB_BM_ROLE_FLD-TABNM =
ZVI_BM_ROLE_FLD-TABNM .
ZTB_BM_ROLE_FLD-FIELDNAME =
ZVI_BM_ROLE_FLD-FIELDNAME .
ZTB_BM_ROLE_FLD-STRUC =
ZVI_BM_ROLE_FLD-STRUC .
ZTB_BM_ROLE_FLD-FIELDSTS =
ZVI_BM_ROLE_FLD-FIELDSTS .
ZTB_BM_ROLE_FLD-TABCONTROL =
ZVI_BM_ROLE_FLD-TABCONTROL .
    SELECT SINGLE * FROM ZTB_BM_ROLE WHERE
BMROLE = ZTB_BM_ROLE_FLD-BMROLE .
    IF SY-SUBRC EQ 0.
ZVI_BM_ROLE_FLD-BMROLENM =
ZTB_BM_ROLE-BMROLENM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_ROLE_FLD-BMROLENM .
    ENDIF.
ENDFORM.
*...processing: ZVI_BM_SL_SCRVL.................................*
FORM GET_DATA_ZVI_BM_SL_SCRVL.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_SL_SCRVL WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_SL_SCRVL .
ZVI_BM_SL_SCRVL-MANDT =
ZTB_BM_SL_SCRVL-MANDT .
ZVI_BM_SL_SCRVL-TRANID =
ZTB_BM_SL_SCRVL-TRANID .
ZVI_BM_SL_SCRVL-STEPTM =
ZTB_BM_SL_SCRVL-STEPTM .
ZVI_BM_SL_SCRVL-DYNNR =
ZTB_BM_SL_SCRVL-DYNNR .
ZVI_BM_SL_SCRVL-FNAME =
ZTB_BM_SL_SCRVL-FNAME .
ZVI_BM_SL_SCRVL-FVALUE =
ZTB_BM_SL_SCRVL-FVALUE .
    SELECT SINGLE * FROM ZTB_BM_SL_STEP WHERE
TRANID = ZTB_BM_SL_SCRVL-TRANID AND
STEPTM = ZTB_BM_SL_SCRVL-STEPTM .
    IF SY-SUBRC EQ 0.
ZVI_BM_SL_SCRVL-FCODE =
ZTB_BM_SL_STEP-FCODE .
      SELECT SINGLE * FROM ZTB_BM_SL_TRAN WHERE
TRANID = ZTB_BM_SL_STEP-TRANID .
      IF SY-SUBRC EQ 0.
ZVI_BM_SL_SCRVL-REPID =
ZTB_BM_SL_TRAN-REPID .
ZVI_BM_SL_SCRVL-UNAME =
ZTB_BM_SL_TRAN-UNAME .
ZVI_BM_SL_SCRVL-TDATE =
ZTB_BM_SL_TRAN-TDATE .
ZVI_BM_SL_SCRVL-TIMEFR =
ZTB_BM_SL_TRAN-TIMEFR .
ZVI_BM_SL_SCRVL-TIMETO =
ZTB_BM_SL_TRAN-TIMETO .
      ENDIF.
    ENDIF.
<VIM_TOTAL_STRUC> = ZVI_BM_SL_SCRVL.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_SL_SCRVL .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_SL_SCRVL.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_SL_SCRVL-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_SL_SCRVL WHERE
  TRANID = ZVI_BM_SL_SCRVL-TRANID AND
  STEPTM = ZVI_BM_SL_SCRVL-STEPTM AND
  DYNNR = ZVI_BM_SL_SCRVL-DYNNR AND
  FNAME = ZVI_BM_SL_SCRVL-FNAME .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_SL_SCRVL .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_SL_SCRVL WHERE
  TRANID = ZVI_BM_SL_SCRVL-TRANID AND
  STEPTM = ZVI_BM_SL_SCRVL-STEPTM AND
  DYNNR = ZVI_BM_SL_SCRVL-DYNNR AND
  FNAME = ZVI_BM_SL_SCRVL-FNAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_SL_SCRVL.
    ENDIF.
ZTB_BM_SL_SCRVL-MANDT =
ZVI_BM_SL_SCRVL-MANDT .
ZTB_BM_SL_SCRVL-TRANID =
ZVI_BM_SL_SCRVL-TRANID .
ZTB_BM_SL_SCRVL-STEPTM =
ZVI_BM_SL_SCRVL-STEPTM .
ZTB_BM_SL_SCRVL-DYNNR =
ZVI_BM_SL_SCRVL-DYNNR .
ZTB_BM_SL_SCRVL-FNAME =
ZVI_BM_SL_SCRVL-FNAME .
ZTB_BM_SL_SCRVL-FVALUE =
ZVI_BM_SL_SCRVL-FVALUE .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_SL_SCRVL ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_SL_SCRVL .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_SL_SCRVL-UPD_FLAG,
STATUS_ZVI_BM_SL_SCRVL-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_SL_SCRVL.
  SELECT SINGLE * FROM ZTB_BM_SL_SCRVL WHERE
TRANID = ZVI_BM_SL_SCRVL-TRANID AND
STEPTM = ZVI_BM_SL_SCRVL-STEPTM AND
DYNNR = ZVI_BM_SL_SCRVL-DYNNR AND
FNAME = ZVI_BM_SL_SCRVL-FNAME .
ZVI_BM_SL_SCRVL-MANDT =
ZTB_BM_SL_SCRVL-MANDT .
ZVI_BM_SL_SCRVL-TRANID =
ZTB_BM_SL_SCRVL-TRANID .
ZVI_BM_SL_SCRVL-STEPTM =
ZTB_BM_SL_SCRVL-STEPTM .
ZVI_BM_SL_SCRVL-DYNNR =
ZTB_BM_SL_SCRVL-DYNNR .
ZVI_BM_SL_SCRVL-FNAME =
ZTB_BM_SL_SCRVL-FNAME .
ZVI_BM_SL_SCRVL-FVALUE =
ZTB_BM_SL_SCRVL-FVALUE .
    SELECT SINGLE * FROM ZTB_BM_SL_STEP WHERE
TRANID = ZTB_BM_SL_SCRVL-TRANID AND
STEPTM = ZTB_BM_SL_SCRVL-STEPTM .
    IF SY-SUBRC EQ 0.
ZVI_BM_SL_SCRVL-FCODE =
ZTB_BM_SL_STEP-FCODE .
      SELECT SINGLE * FROM ZTB_BM_SL_TRAN WHERE
TRANID = ZTB_BM_SL_STEP-TRANID .
      IF SY-SUBRC EQ 0.
ZVI_BM_SL_SCRVL-REPID =
ZTB_BM_SL_TRAN-REPID .
ZVI_BM_SL_SCRVL-UNAME =
ZTB_BM_SL_TRAN-UNAME .
ZVI_BM_SL_SCRVL-TDATE =
ZTB_BM_SL_TRAN-TDATE .
ZVI_BM_SL_SCRVL-TIMEFR =
ZTB_BM_SL_TRAN-TIMEFR .
ZVI_BM_SL_SCRVL-TIMETO =
ZTB_BM_SL_TRAN-TIMETO .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVI_BM_SL_SCRVL-REPID .
        CLEAR ZVI_BM_SL_SCRVL-UNAME .
        CLEAR ZVI_BM_SL_SCRVL-TDATE .
        CLEAR ZVI_BM_SL_SCRVL-TIMEFR .
        CLEAR ZVI_BM_SL_SCRVL-TIMETO .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_SL_SCRVL-FCODE .
      CLEAR ZVI_BM_SL_SCRVL-REPID .
      CLEAR ZVI_BM_SL_SCRVL-UNAME .
      CLEAR ZVI_BM_SL_SCRVL-TDATE .
      CLEAR ZVI_BM_SL_SCRVL-TIMEFR .
      CLEAR ZVI_BM_SL_SCRVL-TIMETO .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_SL_SCRVL USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_SL_SCRVL-TRANID TO
ZTB_BM_SL_SCRVL-TRANID .
MOVE ZVI_BM_SL_SCRVL-STEPTM TO
ZTB_BM_SL_SCRVL-STEPTM .
MOVE ZVI_BM_SL_SCRVL-DYNNR TO
ZTB_BM_SL_SCRVL-DYNNR .
MOVE ZVI_BM_SL_SCRVL-FNAME TO
ZTB_BM_SL_SCRVL-FNAME .
MOVE ZVI_BM_SL_SCRVL-MANDT TO
ZTB_BM_SL_SCRVL-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_SL_SCRVL'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_SL_SCRVL TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_SL_SCRVL'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZVI_BM_SL_SCRVL USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZTB_BM_SL_SCRVL-MANDT =
ZVI_BM_SL_SCRVL-MANDT .
ZTB_BM_SL_SCRVL-TRANID =
ZVI_BM_SL_SCRVL-TRANID .
ZTB_BM_SL_SCRVL-STEPTM =
ZVI_BM_SL_SCRVL-STEPTM .
ZTB_BM_SL_SCRVL-DYNNR =
ZVI_BM_SL_SCRVL-DYNNR .
ZTB_BM_SL_SCRVL-FNAME =
ZVI_BM_SL_SCRVL-FNAME .
ZTB_BM_SL_SCRVL-FVALUE =
ZVI_BM_SL_SCRVL-FVALUE .
    SELECT SINGLE * FROM ZTB_BM_SL_STEP WHERE
TRANID = ZTB_BM_SL_SCRVL-TRANID AND
STEPTM = ZTB_BM_SL_SCRVL-STEPTM .
    IF SY-SUBRC EQ 0.
ZVI_BM_SL_SCRVL-FCODE =
ZTB_BM_SL_STEP-FCODE .
      SELECT SINGLE * FROM ZTB_BM_SL_TRAN WHERE
TRANID = ZTB_BM_SL_STEP-TRANID .
      IF SY-SUBRC EQ 0.
ZVI_BM_SL_SCRVL-REPID =
ZTB_BM_SL_TRAN-REPID .
ZVI_BM_SL_SCRVL-UNAME =
ZTB_BM_SL_TRAN-UNAME .
ZVI_BM_SL_SCRVL-TDATE =
ZTB_BM_SL_TRAN-TDATE .
ZVI_BM_SL_SCRVL-TIMEFR =
ZTB_BM_SL_TRAN-TIMEFR .
ZVI_BM_SL_SCRVL-TIMETO =
ZTB_BM_SL_TRAN-TIMETO .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVI_BM_SL_SCRVL-REPID .
        CLEAR ZVI_BM_SL_SCRVL-UNAME .
        CLEAR ZVI_BM_SL_SCRVL-TDATE .
        CLEAR ZVI_BM_SL_SCRVL-TIMEFR .
        CLEAR ZVI_BM_SL_SCRVL-TIMETO .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_SL_SCRVL-FCODE .
      CLEAR ZVI_BM_SL_SCRVL-REPID .
      CLEAR ZVI_BM_SL_SCRVL-UNAME .
      CLEAR ZVI_BM_SL_SCRVL-TDATE .
      CLEAR ZVI_BM_SL_SCRVL-TIMEFR .
      CLEAR ZVI_BM_SL_SCRVL-TIMETO .
    ENDIF.
ENDFORM.
*...processing: ZVI_BM_SL_STEP..................................*
FORM GET_DATA_ZVI_BM_SL_STEP.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_SL_STEP WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_SL_STEP .
ZVI_BM_SL_STEP-MANDT =
ZTB_BM_SL_STEP-MANDT .
ZVI_BM_SL_STEP-TRANID =
ZTB_BM_SL_STEP-TRANID .
ZVI_BM_SL_STEP-STEPTM =
ZTB_BM_SL_STEP-STEPTM .
ZVI_BM_SL_STEP-FCODE =
ZTB_BM_SL_STEP-FCODE .
    SELECT SINGLE * FROM ZTB_BM_SL_TRAN WHERE
TRANID = ZTB_BM_SL_STEP-TRANID .
    IF SY-SUBRC EQ 0.
ZVI_BM_SL_STEP-REPID =
ZTB_BM_SL_TRAN-REPID .
ZVI_BM_SL_STEP-UNAME =
ZTB_BM_SL_TRAN-UNAME .
ZVI_BM_SL_STEP-TDATE =
ZTB_BM_SL_TRAN-TDATE .
ZVI_BM_SL_STEP-TIMEFR =
ZTB_BM_SL_TRAN-TIMEFR .
ZVI_BM_SL_STEP-TIMETO =
ZTB_BM_SL_TRAN-TIMETO .
    ENDIF.
<VIM_TOTAL_STRUC> = ZVI_BM_SL_STEP.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_SL_STEP .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_SL_STEP.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_SL_STEP-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_SL_STEP WHERE
  TRANID = ZVI_BM_SL_STEP-TRANID AND
  STEPTM = ZVI_BM_SL_STEP-STEPTM .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_SL_STEP .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_SL_STEP WHERE
  TRANID = ZVI_BM_SL_STEP-TRANID AND
  STEPTM = ZVI_BM_SL_STEP-STEPTM .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_SL_STEP.
    ENDIF.
ZTB_BM_SL_STEP-MANDT =
ZVI_BM_SL_STEP-MANDT .
ZTB_BM_SL_STEP-TRANID =
ZVI_BM_SL_STEP-TRANID .
ZTB_BM_SL_STEP-STEPTM =
ZVI_BM_SL_STEP-STEPTM .
ZTB_BM_SL_STEP-FCODE =
ZVI_BM_SL_STEP-FCODE .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_SL_STEP ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_SL_STEP .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_SL_STEP-UPD_FLAG,
STATUS_ZVI_BM_SL_STEP-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_SL_STEP.
  SELECT SINGLE * FROM ZTB_BM_SL_STEP WHERE
TRANID = ZVI_BM_SL_STEP-TRANID AND
STEPTM = ZVI_BM_SL_STEP-STEPTM .
ZVI_BM_SL_STEP-MANDT =
ZTB_BM_SL_STEP-MANDT .
ZVI_BM_SL_STEP-TRANID =
ZTB_BM_SL_STEP-TRANID .
ZVI_BM_SL_STEP-STEPTM =
ZTB_BM_SL_STEP-STEPTM .
ZVI_BM_SL_STEP-FCODE =
ZTB_BM_SL_STEP-FCODE .
    SELECT SINGLE * FROM ZTB_BM_SL_TRAN WHERE
TRANID = ZTB_BM_SL_STEP-TRANID .
    IF SY-SUBRC EQ 0.
ZVI_BM_SL_STEP-REPID =
ZTB_BM_SL_TRAN-REPID .
ZVI_BM_SL_STEP-UNAME =
ZTB_BM_SL_TRAN-UNAME .
ZVI_BM_SL_STEP-TDATE =
ZTB_BM_SL_TRAN-TDATE .
ZVI_BM_SL_STEP-TIMEFR =
ZTB_BM_SL_TRAN-TIMEFR .
ZVI_BM_SL_STEP-TIMETO =
ZTB_BM_SL_TRAN-TIMETO .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_SL_STEP-REPID .
      CLEAR ZVI_BM_SL_STEP-UNAME .
      CLEAR ZVI_BM_SL_STEP-TDATE .
      CLEAR ZVI_BM_SL_STEP-TIMEFR .
      CLEAR ZVI_BM_SL_STEP-TIMETO .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_SL_STEP USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_SL_STEP-TRANID TO
ZTB_BM_SL_STEP-TRANID .
MOVE ZVI_BM_SL_STEP-STEPTM TO
ZTB_BM_SL_STEP-STEPTM .
MOVE ZVI_BM_SL_STEP-MANDT TO
ZTB_BM_SL_STEP-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_SL_STEP'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_SL_STEP TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_SL_STEP'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZVI_BM_SL_STEP USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZTB_BM_SL_STEP-MANDT =
ZVI_BM_SL_STEP-MANDT .
ZTB_BM_SL_STEP-TRANID =
ZVI_BM_SL_STEP-TRANID .
ZTB_BM_SL_STEP-STEPTM =
ZVI_BM_SL_STEP-STEPTM .
ZTB_BM_SL_STEP-FCODE =
ZVI_BM_SL_STEP-FCODE .
    SELECT SINGLE * FROM ZTB_BM_SL_TRAN WHERE
TRANID = ZTB_BM_SL_STEP-TRANID .
    IF SY-SUBRC EQ 0.
ZVI_BM_SL_STEP-REPID =
ZTB_BM_SL_TRAN-REPID .
ZVI_BM_SL_STEP-UNAME =
ZTB_BM_SL_TRAN-UNAME .
ZVI_BM_SL_STEP-TDATE =
ZTB_BM_SL_TRAN-TDATE .
ZVI_BM_SL_STEP-TIMEFR =
ZTB_BM_SL_TRAN-TIMEFR .
ZVI_BM_SL_STEP-TIMETO =
ZTB_BM_SL_TRAN-TIMETO .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_SL_STEP-REPID .
      CLEAR ZVI_BM_SL_STEP-UNAME .
      CLEAR ZVI_BM_SL_STEP-TDATE .
      CLEAR ZVI_BM_SL_STEP-TIMEFR .
      CLEAR ZVI_BM_SL_STEP-TIMETO .
    ENDIF.
ENDFORM.
*...processing: ZVI_BM_SL_TRAN..................................*
FORM GET_DATA_ZVI_BM_SL_TRAN.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_SL_TRAN WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_SL_TRAN .
ZVI_BM_SL_TRAN-MANDT =
ZTB_BM_SL_TRAN-MANDT .
ZVI_BM_SL_TRAN-REPID =
ZTB_BM_SL_TRAN-REPID .
ZVI_BM_SL_TRAN-UNAME =
ZTB_BM_SL_TRAN-UNAME .
ZVI_BM_SL_TRAN-TRANID =
ZTB_BM_SL_TRAN-TRANID .
ZVI_BM_SL_TRAN-TDATE =
ZTB_BM_SL_TRAN-TDATE .
ZVI_BM_SL_TRAN-TIMEFR =
ZTB_BM_SL_TRAN-TIMEFR .
ZVI_BM_SL_TRAN-TIMETO =
ZTB_BM_SL_TRAN-TIMETO .
<VIM_TOTAL_STRUC> = ZVI_BM_SL_TRAN.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_SL_TRAN .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_SL_TRAN.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_SL_TRAN-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_SL_TRAN WHERE
  TRANID = ZVI_BM_SL_TRAN-TRANID .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_SL_TRAN .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_SL_TRAN WHERE
  TRANID = ZVI_BM_SL_TRAN-TRANID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_SL_TRAN.
    ENDIF.
ZTB_BM_SL_TRAN-MANDT =
ZVI_BM_SL_TRAN-MANDT .
ZTB_BM_SL_TRAN-REPID =
ZVI_BM_SL_TRAN-REPID .
ZTB_BM_SL_TRAN-UNAME =
ZVI_BM_SL_TRAN-UNAME .
ZTB_BM_SL_TRAN-TRANID =
ZVI_BM_SL_TRAN-TRANID .
ZTB_BM_SL_TRAN-TDATE =
ZVI_BM_SL_TRAN-TDATE .
ZTB_BM_SL_TRAN-TIMEFR =
ZVI_BM_SL_TRAN-TIMEFR .
ZTB_BM_SL_TRAN-TIMETO =
ZVI_BM_SL_TRAN-TIMETO .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_SL_TRAN ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_SL_TRAN .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_SL_TRAN-UPD_FLAG,
STATUS_ZVI_BM_SL_TRAN-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_SL_TRAN.
  SELECT SINGLE * FROM ZTB_BM_SL_TRAN WHERE
TRANID = ZVI_BM_SL_TRAN-TRANID .
ZVI_BM_SL_TRAN-MANDT =
ZTB_BM_SL_TRAN-MANDT .
ZVI_BM_SL_TRAN-REPID =
ZTB_BM_SL_TRAN-REPID .
ZVI_BM_SL_TRAN-UNAME =
ZTB_BM_SL_TRAN-UNAME .
ZVI_BM_SL_TRAN-TRANID =
ZTB_BM_SL_TRAN-TRANID .
ZVI_BM_SL_TRAN-TDATE =
ZTB_BM_SL_TRAN-TDATE .
ZVI_BM_SL_TRAN-TIMEFR =
ZTB_BM_SL_TRAN-TIMEFR .
ZVI_BM_SL_TRAN-TIMETO =
ZTB_BM_SL_TRAN-TIMETO .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_SL_TRAN USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_SL_TRAN-TRANID TO
ZTB_BM_SL_TRAN-TRANID .
MOVE ZVI_BM_SL_TRAN-MANDT TO
ZTB_BM_SL_TRAN-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_SL_TRAN'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_SL_TRAN TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_SL_TRAN'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_SV_TRAND.................................*
FORM GET_DATA_ZVI_BM_SV_TRAND.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_SV_TRAND WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_SV_TRAND .
ZVI_BM_SV_TRAND-MANDT =
ZTB_BM_SV_TRAND-MANDT .
ZVI_BM_SV_TRAND-TDATE =
ZTB_BM_SV_TRAND-TDATE .
ZVI_BM_SV_TRAND-TDATP =
ZTB_BM_SV_TRAND-TDATP .
ZVI_BM_SV_TRAND-TRANTY =
ZTB_BM_SV_TRAND-TRANTY .
ZVI_BM_SV_TRAND-PAYUSR =
ZTB_BM_SV_TRAND-PAYUSR .
ZVI_BM_SV_TRAND-PRIORITY =
ZTB_BM_SV_TRAND-PRIORITY .
ZVI_BM_SV_TRAND-RECVUSR =
ZTB_BM_SV_TRAND-RECVUSR .
ZVI_BM_SV_TRAND-TCOUNT =
ZTB_BM_SV_TRAND-TCOUNT .
<VIM_TOTAL_STRUC> = ZVI_BM_SV_TRAND.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_SV_TRAND .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_SV_TRAND.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_SV_TRAND-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_SV_TRAND WHERE
  TDATE = ZVI_BM_SV_TRAND-TDATE AND
  TDATP = ZVI_BM_SV_TRAND-TDATP AND
  TRANTY = ZVI_BM_SV_TRAND-TRANTY AND
  PAYUSR = ZVI_BM_SV_TRAND-PAYUSR AND
  PRIORITY = ZVI_BM_SV_TRAND-PRIORITY AND
  RECVUSR = ZVI_BM_SV_TRAND-RECVUSR .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_SV_TRAND .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_SV_TRAND WHERE
  TDATE = ZVI_BM_SV_TRAND-TDATE AND
  TDATP = ZVI_BM_SV_TRAND-TDATP AND
  TRANTY = ZVI_BM_SV_TRAND-TRANTY AND
  PAYUSR = ZVI_BM_SV_TRAND-PAYUSR AND
  PRIORITY = ZVI_BM_SV_TRAND-PRIORITY AND
  RECVUSR = ZVI_BM_SV_TRAND-RECVUSR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_SV_TRAND.
    ENDIF.
ZTB_BM_SV_TRAND-MANDT =
ZVI_BM_SV_TRAND-MANDT .
ZTB_BM_SV_TRAND-TDATE =
ZVI_BM_SV_TRAND-TDATE .
ZTB_BM_SV_TRAND-TDATP =
ZVI_BM_SV_TRAND-TDATP .
ZTB_BM_SV_TRAND-TRANTY =
ZVI_BM_SV_TRAND-TRANTY .
ZTB_BM_SV_TRAND-PAYUSR =
ZVI_BM_SV_TRAND-PAYUSR .
ZTB_BM_SV_TRAND-PRIORITY =
ZVI_BM_SV_TRAND-PRIORITY .
ZTB_BM_SV_TRAND-RECVUSR =
ZVI_BM_SV_TRAND-RECVUSR .
ZTB_BM_SV_TRAND-TCOUNT =
ZVI_BM_SV_TRAND-TCOUNT .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_SV_TRAND ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_SV_TRAND .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_SV_TRAND-UPD_FLAG,
STATUS_ZVI_BM_SV_TRAND-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_SV_TRAND.
  SELECT SINGLE * FROM ZTB_BM_SV_TRAND WHERE
TDATE = ZVI_BM_SV_TRAND-TDATE AND
TDATP = ZVI_BM_SV_TRAND-TDATP AND
TRANTY = ZVI_BM_SV_TRAND-TRANTY AND
PAYUSR = ZVI_BM_SV_TRAND-PAYUSR AND
PRIORITY = ZVI_BM_SV_TRAND-PRIORITY AND
RECVUSR = ZVI_BM_SV_TRAND-RECVUSR .
ZVI_BM_SV_TRAND-MANDT =
ZTB_BM_SV_TRAND-MANDT .
ZVI_BM_SV_TRAND-TDATE =
ZTB_BM_SV_TRAND-TDATE .
ZVI_BM_SV_TRAND-TDATP =
ZTB_BM_SV_TRAND-TDATP .
ZVI_BM_SV_TRAND-TRANTY =
ZTB_BM_SV_TRAND-TRANTY .
ZVI_BM_SV_TRAND-PAYUSR =
ZTB_BM_SV_TRAND-PAYUSR .
ZVI_BM_SV_TRAND-PRIORITY =
ZTB_BM_SV_TRAND-PRIORITY .
ZVI_BM_SV_TRAND-RECVUSR =
ZTB_BM_SV_TRAND-RECVUSR .
ZVI_BM_SV_TRAND-TCOUNT =
ZTB_BM_SV_TRAND-TCOUNT .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_SV_TRAND USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_SV_TRAND-TDATE TO
ZTB_BM_SV_TRAND-TDATE .
MOVE ZVI_BM_SV_TRAND-TDATP TO
ZTB_BM_SV_TRAND-TDATP .
MOVE ZVI_BM_SV_TRAND-TRANTY TO
ZTB_BM_SV_TRAND-TRANTY .
MOVE ZVI_BM_SV_TRAND-PAYUSR TO
ZTB_BM_SV_TRAND-PAYUSR .
MOVE ZVI_BM_SV_TRAND-PRIORITY TO
ZTB_BM_SV_TRAND-PRIORITY .
MOVE ZVI_BM_SV_TRAND-RECVUSR TO
ZTB_BM_SV_TRAND-RECVUSR .
MOVE ZVI_BM_SV_TRAND-MANDT TO
ZTB_BM_SV_TRAND-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_SV_TRAND'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_SV_TRAND TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_SV_TRAND'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_SV_TRANS.................................*
FORM GET_DATA_ZVI_BM_SV_TRANS.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_SV_TRANS WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_SV_TRANS .
ZVI_BM_SV_TRANS-MANDT =
ZTB_BM_SV_TRANS-MANDT .
ZVI_BM_SV_TRANS-TDATE =
ZTB_BM_SV_TRANS-TDATE .
ZVI_BM_SV_TRANS-TDATP =
ZTB_BM_SV_TRANS-TDATP .
ZVI_BM_SV_TRANS-TRANTY =
ZTB_BM_SV_TRANS-TRANTY .
ZVI_BM_SV_TRANS-PAYUSR =
ZTB_BM_SV_TRANS-PAYUSR .
ZVI_BM_SV_TRANS-AMOUNT =
ZTB_BM_SV_TRANS-AMOUNT .
ZVI_BM_SV_TRANS-WAERS =
ZTB_BM_SV_TRANS-WAERS .
ZVI_BM_SV_TRANS-DEACTIVE =
ZTB_BM_SV_TRANS-DEACTIVE .
<VIM_TOTAL_STRUC> = ZVI_BM_SV_TRANS.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_SV_TRANS .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_SV_TRANS.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_SV_TRANS-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_SV_TRANS WHERE
  TDATE = ZVI_BM_SV_TRANS-TDATE AND
  TDATP = ZVI_BM_SV_TRANS-TDATP AND
  TRANTY = ZVI_BM_SV_TRANS-TRANTY AND
  PAYUSR = ZVI_BM_SV_TRANS-PAYUSR .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_SV_TRANS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_SV_TRANS WHERE
  TDATE = ZVI_BM_SV_TRANS-TDATE AND
  TDATP = ZVI_BM_SV_TRANS-TDATP AND
  TRANTY = ZVI_BM_SV_TRANS-TRANTY AND
  PAYUSR = ZVI_BM_SV_TRANS-PAYUSR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_SV_TRANS.
    ENDIF.
ZTB_BM_SV_TRANS-MANDT =
ZVI_BM_SV_TRANS-MANDT .
ZTB_BM_SV_TRANS-TDATE =
ZVI_BM_SV_TRANS-TDATE .
ZTB_BM_SV_TRANS-TDATP =
ZVI_BM_SV_TRANS-TDATP .
ZTB_BM_SV_TRANS-TRANTY =
ZVI_BM_SV_TRANS-TRANTY .
ZTB_BM_SV_TRANS-PAYUSR =
ZVI_BM_SV_TRANS-PAYUSR .
ZTB_BM_SV_TRANS-AMOUNT =
ZVI_BM_SV_TRANS-AMOUNT .
ZTB_BM_SV_TRANS-WAERS =
ZVI_BM_SV_TRANS-WAERS .
ZTB_BM_SV_TRANS-DEACTIVE =
ZVI_BM_SV_TRANS-DEACTIVE .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_SV_TRANS ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_SV_TRANS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_SV_TRANS-UPD_FLAG,
STATUS_ZVI_BM_SV_TRANS-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_SV_TRANS.
  SELECT SINGLE * FROM ZTB_BM_SV_TRANS WHERE
TDATE = ZVI_BM_SV_TRANS-TDATE AND
TDATP = ZVI_BM_SV_TRANS-TDATP AND
TRANTY = ZVI_BM_SV_TRANS-TRANTY AND
PAYUSR = ZVI_BM_SV_TRANS-PAYUSR .
ZVI_BM_SV_TRANS-MANDT =
ZTB_BM_SV_TRANS-MANDT .
ZVI_BM_SV_TRANS-TDATE =
ZTB_BM_SV_TRANS-TDATE .
ZVI_BM_SV_TRANS-TDATP =
ZTB_BM_SV_TRANS-TDATP .
ZVI_BM_SV_TRANS-TRANTY =
ZTB_BM_SV_TRANS-TRANTY .
ZVI_BM_SV_TRANS-PAYUSR =
ZTB_BM_SV_TRANS-PAYUSR .
ZVI_BM_SV_TRANS-AMOUNT =
ZTB_BM_SV_TRANS-AMOUNT .
ZVI_BM_SV_TRANS-WAERS =
ZTB_BM_SV_TRANS-WAERS .
ZVI_BM_SV_TRANS-DEACTIVE =
ZTB_BM_SV_TRANS-DEACTIVE .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_SV_TRANS USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_SV_TRANS-TDATE TO
ZTB_BM_SV_TRANS-TDATE .
MOVE ZVI_BM_SV_TRANS-TDATP TO
ZTB_BM_SV_TRANS-TDATP .
MOVE ZVI_BM_SV_TRANS-TRANTY TO
ZTB_BM_SV_TRANS-TRANTY .
MOVE ZVI_BM_SV_TRANS-PAYUSR TO
ZTB_BM_SV_TRANS-PAYUSR .
MOVE ZVI_BM_SV_TRANS-MANDT TO
ZTB_BM_SV_TRANS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_SV_TRANS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_SV_TRANS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_SV_TRANS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_USR_ROLE.................................*
FORM GET_DATA_ZVI_BM_USR_ROLE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_USR_ROLE WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_USR_ROLE .
ZVI_BM_USR_ROLE-MANDT =
ZTB_BM_USR_ROLE-MANDT .
ZVI_BM_USR_ROLE-BMROLE =
ZTB_BM_USR_ROLE-BMROLE .
ZVI_BM_USR_ROLE-BNAME =
ZTB_BM_USR_ROLE-BNAME .
<VIM_TOTAL_STRUC> = ZVI_BM_USR_ROLE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_USR_ROLE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_USR_ROLE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_USR_ROLE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_USR_ROLE WHERE
  BMROLE = ZVI_BM_USR_ROLE-BMROLE AND
  BNAME = ZVI_BM_USR_ROLE-BNAME .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_USR_ROLE .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_USR_ROLE WHERE
  BMROLE = ZVI_BM_USR_ROLE-BMROLE AND
  BNAME = ZVI_BM_USR_ROLE-BNAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_USR_ROLE.
    ENDIF.
ZTB_BM_USR_ROLE-MANDT =
ZVI_BM_USR_ROLE-MANDT .
ZTB_BM_USR_ROLE-BMROLE =
ZVI_BM_USR_ROLE-BMROLE .
ZTB_BM_USR_ROLE-BNAME =
ZVI_BM_USR_ROLE-BNAME .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_USR_ROLE ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_USR_ROLE .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_USR_ROLE-UPD_FLAG,
STATUS_ZVI_BM_USR_ROLE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_USR_ROLE.
  SELECT SINGLE * FROM ZTB_BM_USR_ROLE WHERE
BMROLE = ZVI_BM_USR_ROLE-BMROLE AND
BNAME = ZVI_BM_USR_ROLE-BNAME .
ZVI_BM_USR_ROLE-MANDT =
ZTB_BM_USR_ROLE-MANDT .
ZVI_BM_USR_ROLE-BMROLE =
ZTB_BM_USR_ROLE-BMROLE .
ZVI_BM_USR_ROLE-BNAME =
ZTB_BM_USR_ROLE-BNAME .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_USR_ROLE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_USR_ROLE-BMROLE TO
ZTB_BM_USR_ROLE-BMROLE .
MOVE ZVI_BM_USR_ROLE-BNAME TO
ZTB_BM_USR_ROLE-BNAME .
MOVE ZVI_BM_USR_ROLE-MANDT TO
ZTB_BM_USR_ROLE-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_USR_ROLE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_USR_ROLE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_USR_ROLE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_EXCEL_LAYOUT................................*
FORM GET_DATA_ZVI_EXCEL_LAYOUT.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_EXCEL_LAYOUT WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_EXCEL_LAYOUT .
ZVI_EXCEL_LAYOUT-MANDT =
ZTB_EXCEL_LAYOUT-MANDT .
ZVI_EXCEL_LAYOUT-REPORT =
ZTB_EXCEL_LAYOUT-REPORT .
ZVI_EXCEL_LAYOUT-FNAME =
ZTB_EXCEL_LAYOUT-FNAME .
ZVI_EXCEL_LAYOUT-POSID =
ZTB_EXCEL_LAYOUT-POSID .
ZVI_EXCEL_LAYOUT-ROW_POS =
ZTB_EXCEL_LAYOUT-ROW_POS .
ZVI_EXCEL_LAYOUT-COL_POS =
ZTB_EXCEL_LAYOUT-COL_POS .
ZVI_EXCEL_LAYOUT-GRPEX =
ZTB_EXCEL_LAYOUT-GRPEX .
ZVI_EXCEL_LAYOUT-IS_ITEM =
ZTB_EXCEL_LAYOUT-IS_ITEM .
ZVI_EXCEL_LAYOUT-INITROWS =
ZTB_EXCEL_LAYOUT-INITROWS .
ZVI_EXCEL_LAYOUT-INITCOLS =
ZTB_EXCEL_LAYOUT-INITCOLS .
ZVI_EXCEL_LAYOUT-INSERT_ROW =
ZTB_EXCEL_LAYOUT-INSERT_ROW .
ZVI_EXCEL_LAYOUT-INSERT_COL =
ZTB_EXCEL_LAYOUT-INSERT_COL .
ZVI_EXCEL_LAYOUT-EXHDR =
ZTB_EXCEL_LAYOUT-EXHDR .
ZVI_EXCEL_LAYOUT-EXHCL =
ZTB_EXCEL_LAYOUT-EXHCL .
ZVI_EXCEL_LAYOUT-NCOLS =
ZTB_EXCEL_LAYOUT-NCOLS .
ZVI_EXCEL_LAYOUT-GBOLD =
ZTB_EXCEL_LAYOUT-GBOLD .
ZVI_EXCEL_LAYOUT-PREFIX =
ZTB_EXCEL_LAYOUT-PREFIX .
ZVI_EXCEL_LAYOUT-SUFFIX =
ZTB_EXCEL_LAYOUT-SUFFIX .
ZVI_EXCEL_LAYOUT-DOMAIN_CV =
ZTB_EXCEL_LAYOUT-DOMAIN_CV .
<VIM_TOTAL_STRUC> = ZVI_EXCEL_LAYOUT.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_EXCEL_LAYOUT .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_EXCEL_LAYOUT.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_EXCEL_LAYOUT-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_EXCEL_LAYOUT WHERE
  REPORT = ZVI_EXCEL_LAYOUT-REPORT AND
  FNAME = ZVI_EXCEL_LAYOUT-FNAME AND
  POSID = ZVI_EXCEL_LAYOUT-POSID .
    IF SY-SUBRC = 0.
    DELETE ZTB_EXCEL_LAYOUT .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_EXCEL_LAYOUT WHERE
  REPORT = ZVI_EXCEL_LAYOUT-REPORT AND
  FNAME = ZVI_EXCEL_LAYOUT-FNAME AND
  POSID = ZVI_EXCEL_LAYOUT-POSID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_EXCEL_LAYOUT.
    ENDIF.
ZTB_EXCEL_LAYOUT-MANDT =
ZVI_EXCEL_LAYOUT-MANDT .
ZTB_EXCEL_LAYOUT-REPORT =
ZVI_EXCEL_LAYOUT-REPORT .
ZTB_EXCEL_LAYOUT-FNAME =
ZVI_EXCEL_LAYOUT-FNAME .
ZTB_EXCEL_LAYOUT-POSID =
ZVI_EXCEL_LAYOUT-POSID .
ZTB_EXCEL_LAYOUT-ROW_POS =
ZVI_EXCEL_LAYOUT-ROW_POS .
ZTB_EXCEL_LAYOUT-COL_POS =
ZVI_EXCEL_LAYOUT-COL_POS .
ZTB_EXCEL_LAYOUT-GRPEX =
ZVI_EXCEL_LAYOUT-GRPEX .
ZTB_EXCEL_LAYOUT-IS_ITEM =
ZVI_EXCEL_LAYOUT-IS_ITEM .
ZTB_EXCEL_LAYOUT-INITROWS =
ZVI_EXCEL_LAYOUT-INITROWS .
ZTB_EXCEL_LAYOUT-INITCOLS =
ZVI_EXCEL_LAYOUT-INITCOLS .
ZTB_EXCEL_LAYOUT-INSERT_ROW =
ZVI_EXCEL_LAYOUT-INSERT_ROW .
ZTB_EXCEL_LAYOUT-INSERT_COL =
ZVI_EXCEL_LAYOUT-INSERT_COL .
ZTB_EXCEL_LAYOUT-EXHDR =
ZVI_EXCEL_LAYOUT-EXHDR .
ZTB_EXCEL_LAYOUT-EXHCL =
ZVI_EXCEL_LAYOUT-EXHCL .
ZTB_EXCEL_LAYOUT-NCOLS =
ZVI_EXCEL_LAYOUT-NCOLS .
ZTB_EXCEL_LAYOUT-GBOLD =
ZVI_EXCEL_LAYOUT-GBOLD .
ZTB_EXCEL_LAYOUT-PREFIX =
ZVI_EXCEL_LAYOUT-PREFIX .
ZTB_EXCEL_LAYOUT-SUFFIX =
ZVI_EXCEL_LAYOUT-SUFFIX .
ZTB_EXCEL_LAYOUT-DOMAIN_CV =
ZVI_EXCEL_LAYOUT-DOMAIN_CV .
    IF SY-SUBRC = 0.
    UPDATE ZTB_EXCEL_LAYOUT ##WARN_OK.
    ELSE.
    INSERT ZTB_EXCEL_LAYOUT .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_EXCEL_LAYOUT-UPD_FLAG,
STATUS_ZVI_EXCEL_LAYOUT-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_EXCEL_LAYOUT.
  SELECT SINGLE * FROM ZTB_EXCEL_LAYOUT WHERE
REPORT = ZVI_EXCEL_LAYOUT-REPORT AND
FNAME = ZVI_EXCEL_LAYOUT-FNAME AND
POSID = ZVI_EXCEL_LAYOUT-POSID .
ZVI_EXCEL_LAYOUT-MANDT =
ZTB_EXCEL_LAYOUT-MANDT .
ZVI_EXCEL_LAYOUT-REPORT =
ZTB_EXCEL_LAYOUT-REPORT .
ZVI_EXCEL_LAYOUT-FNAME =
ZTB_EXCEL_LAYOUT-FNAME .
ZVI_EXCEL_LAYOUT-POSID =
ZTB_EXCEL_LAYOUT-POSID .
ZVI_EXCEL_LAYOUT-ROW_POS =
ZTB_EXCEL_LAYOUT-ROW_POS .
ZVI_EXCEL_LAYOUT-COL_POS =
ZTB_EXCEL_LAYOUT-COL_POS .
ZVI_EXCEL_LAYOUT-GRPEX =
ZTB_EXCEL_LAYOUT-GRPEX .
ZVI_EXCEL_LAYOUT-IS_ITEM =
ZTB_EXCEL_LAYOUT-IS_ITEM .
ZVI_EXCEL_LAYOUT-INITROWS =
ZTB_EXCEL_LAYOUT-INITROWS .
ZVI_EXCEL_LAYOUT-INITCOLS =
ZTB_EXCEL_LAYOUT-INITCOLS .
ZVI_EXCEL_LAYOUT-INSERT_ROW =
ZTB_EXCEL_LAYOUT-INSERT_ROW .
ZVI_EXCEL_LAYOUT-INSERT_COL =
ZTB_EXCEL_LAYOUT-INSERT_COL .
ZVI_EXCEL_LAYOUT-EXHDR =
ZTB_EXCEL_LAYOUT-EXHDR .
ZVI_EXCEL_LAYOUT-EXHCL =
ZTB_EXCEL_LAYOUT-EXHCL .
ZVI_EXCEL_LAYOUT-NCOLS =
ZTB_EXCEL_LAYOUT-NCOLS .
ZVI_EXCEL_LAYOUT-GBOLD =
ZTB_EXCEL_LAYOUT-GBOLD .
ZVI_EXCEL_LAYOUT-PREFIX =
ZTB_EXCEL_LAYOUT-PREFIX .
ZVI_EXCEL_LAYOUT-SUFFIX =
ZTB_EXCEL_LAYOUT-SUFFIX .
ZVI_EXCEL_LAYOUT-DOMAIN_CV =
ZTB_EXCEL_LAYOUT-DOMAIN_CV .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_EXCEL_LAYOUT USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_EXCEL_LAYOUT-REPORT TO
ZTB_EXCEL_LAYOUT-REPORT .
MOVE ZVI_EXCEL_LAYOUT-FNAME TO
ZTB_EXCEL_LAYOUT-FNAME .
MOVE ZVI_EXCEL_LAYOUT-POSID TO
ZTB_EXCEL_LAYOUT-POSID .
MOVE ZVI_EXCEL_LAYOUT-MANDT TO
ZTB_EXCEL_LAYOUT-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_EXCEL_LAYOUT'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_EXCEL_LAYOUT TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_EXCEL_LAYOUT'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_EXCEL_SHEETS................................*
FORM GET_DATA_ZVI_EXCEL_SHEETS.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_EXCEL_SHEETS WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_EXCEL_SHEETS .
ZVI_EXCEL_SHEETS-MANDT =
ZTB_EXCEL_SHEETS-MANDT .
ZVI_EXCEL_SHEETS-REPID =
ZTB_EXCEL_SHEETS-REPID .
ZVI_EXCEL_SHEETS-SHEETNO =
ZTB_EXCEL_SHEETS-SHEETNO .
ZVI_EXCEL_SHEETS-CPSHEET =
ZTB_EXCEL_SHEETS-CPSHEET .
<VIM_TOTAL_STRUC> = ZVI_EXCEL_SHEETS.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_EXCEL_SHEETS .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_EXCEL_SHEETS.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_EXCEL_SHEETS-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_EXCEL_SHEETS WHERE
  REPID = ZVI_EXCEL_SHEETS-REPID AND
  SHEETNO = ZVI_EXCEL_SHEETS-SHEETNO .
    IF SY-SUBRC = 0.
    DELETE ZTB_EXCEL_SHEETS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_EXCEL_SHEETS WHERE
  REPID = ZVI_EXCEL_SHEETS-REPID AND
  SHEETNO = ZVI_EXCEL_SHEETS-SHEETNO .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_EXCEL_SHEETS.
    ENDIF.
ZTB_EXCEL_SHEETS-MANDT =
ZVI_EXCEL_SHEETS-MANDT .
ZTB_EXCEL_SHEETS-REPID =
ZVI_EXCEL_SHEETS-REPID .
ZTB_EXCEL_SHEETS-SHEETNO =
ZVI_EXCEL_SHEETS-SHEETNO .
ZTB_EXCEL_SHEETS-CPSHEET =
ZVI_EXCEL_SHEETS-CPSHEET .
    IF SY-SUBRC = 0.
    UPDATE ZTB_EXCEL_SHEETS ##WARN_OK.
    ELSE.
    INSERT ZTB_EXCEL_SHEETS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_EXCEL_SHEETS-UPD_FLAG,
STATUS_ZVI_EXCEL_SHEETS-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_EXCEL_SHEETS.
  SELECT SINGLE * FROM ZTB_EXCEL_SHEETS WHERE
REPID = ZVI_EXCEL_SHEETS-REPID AND
SHEETNO = ZVI_EXCEL_SHEETS-SHEETNO .
ZVI_EXCEL_SHEETS-MANDT =
ZTB_EXCEL_SHEETS-MANDT .
ZVI_EXCEL_SHEETS-REPID =
ZTB_EXCEL_SHEETS-REPID .
ZVI_EXCEL_SHEETS-SHEETNO =
ZTB_EXCEL_SHEETS-SHEETNO .
ZVI_EXCEL_SHEETS-CPSHEET =
ZTB_EXCEL_SHEETS-CPSHEET .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_EXCEL_SHEETS USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_EXCEL_SHEETS-REPID TO
ZTB_EXCEL_SHEETS-REPID .
MOVE ZVI_EXCEL_SHEETS-SHEETNO TO
ZTB_EXCEL_SHEETS-SHEETNO .
MOVE ZVI_EXCEL_SHEETS-MANDT TO
ZTB_EXCEL_SHEETS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_EXCEL_SHEETS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_EXCEL_SHEETS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_EXCEL_SHEETS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_FIELD_DB....................................*
FORM GET_DATA_ZVI_FIELD_DB.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_FIELD_DB WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_FIELD_DB .
ZVI_FIELD_DB-MANDT =
ZTB_FIELD_DB-MANDT .
ZVI_FIELD_DB-REPID =
ZTB_FIELD_DB-REPID .
ZVI_FIELD_DB-DYNNR =
ZTB_FIELD_DB-DYNNR .
ZVI_FIELD_DB-CSTEP =
ZTB_FIELD_DB-CSTEP .
ZVI_FIELD_DB-FPOSI =
ZTB_FIELD_DB-FPOSI .
ZVI_FIELD_DB-FIELDNAME =
ZTB_FIELD_DB-FIELDNAME .
ZVI_FIELD_DB-FIELDSTS =
ZTB_FIELD_DB-FIELDSTS .
ZVI_FIELD_DB-CHECK_INIT =
ZTB_FIELD_DB-CHECK_INIT .
ZVI_FIELD_DB-TABNAME =
ZTB_FIELD_DB-TABNAME .
ZVI_FIELD_DB-KEYF1 =
ZTB_FIELD_DB-KEYF1 .
ZVI_FIELD_DB-KEYF2 =
ZTB_FIELD_DB-KEYF2 .
ZVI_FIELD_DB-PRFIELD2 =
ZTB_FIELD_DB-PRFIELD2 .
ZVI_FIELD_DB-KEYF3 =
ZTB_FIELD_DB-KEYF3 .
ZVI_FIELD_DB-PRFIELD3 =
ZTB_FIELD_DB-PRFIELD3 .
ZVI_FIELD_DB-LOOPTAB =
ZTB_FIELD_DB-LOOPTAB .
ZVI_FIELD_DB-TABCONTROL =
ZTB_FIELD_DB-TABCONTROL .
ZVI_FIELD_DB-TEXT_TARGET =
ZTB_FIELD_DB-TEXT_TARGET .
ZVI_FIELD_DB-TEXT_FIELD =
ZTB_FIELD_DB-TEXT_FIELD .
ZVI_FIELD_DB-CKSUBR =
ZTB_FIELD_DB-CKSUBR .
ZVI_FIELD_DB-INIT_FIELD =
ZTB_FIELD_DB-INIT_FIELD .
ZVI_FIELD_DB-SUBSCR =
ZTB_FIELD_DB-SUBSCR .
ZVI_FIELD_DB-LABELF =
ZTB_FIELD_DB-LABELF .
ZVI_FIELD_DB-SETLIST =
ZTB_FIELD_DB-SETLIST .
ZVI_FIELD_DB-SGROUP =
ZTB_FIELD_DB-SGROUP .
<VIM_TOTAL_STRUC> = ZVI_FIELD_DB.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_FIELD_DB .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_FIELD_DB.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_FIELD_DB-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_FIELD_DB WHERE
  REPID = ZVI_FIELD_DB-REPID AND
  DYNNR = ZVI_FIELD_DB-DYNNR AND
  CSTEP = ZVI_FIELD_DB-CSTEP AND
  FPOSI = ZVI_FIELD_DB-FPOSI AND
  FIELDNAME = ZVI_FIELD_DB-FIELDNAME .
    IF SY-SUBRC = 0.
    DELETE ZTB_FIELD_DB .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_FIELD_DB WHERE
  REPID = ZVI_FIELD_DB-REPID AND
  DYNNR = ZVI_FIELD_DB-DYNNR AND
  CSTEP = ZVI_FIELD_DB-CSTEP AND
  FPOSI = ZVI_FIELD_DB-FPOSI AND
  FIELDNAME = ZVI_FIELD_DB-FIELDNAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_FIELD_DB.
    ENDIF.
ZTB_FIELD_DB-MANDT =
ZVI_FIELD_DB-MANDT .
ZTB_FIELD_DB-REPID =
ZVI_FIELD_DB-REPID .
ZTB_FIELD_DB-DYNNR =
ZVI_FIELD_DB-DYNNR .
ZTB_FIELD_DB-CSTEP =
ZVI_FIELD_DB-CSTEP .
ZTB_FIELD_DB-FPOSI =
ZVI_FIELD_DB-FPOSI .
ZTB_FIELD_DB-FIELDNAME =
ZVI_FIELD_DB-FIELDNAME .
ZTB_FIELD_DB-FIELDSTS =
ZVI_FIELD_DB-FIELDSTS .
ZTB_FIELD_DB-CHECK_INIT =
ZVI_FIELD_DB-CHECK_INIT .
ZTB_FIELD_DB-TABNAME =
ZVI_FIELD_DB-TABNAME .
ZTB_FIELD_DB-KEYF1 =
ZVI_FIELD_DB-KEYF1 .
ZTB_FIELD_DB-KEYF2 =
ZVI_FIELD_DB-KEYF2 .
ZTB_FIELD_DB-PRFIELD2 =
ZVI_FIELD_DB-PRFIELD2 .
ZTB_FIELD_DB-KEYF3 =
ZVI_FIELD_DB-KEYF3 .
ZTB_FIELD_DB-PRFIELD3 =
ZVI_FIELD_DB-PRFIELD3 .
ZTB_FIELD_DB-LOOPTAB =
ZVI_FIELD_DB-LOOPTAB .
ZTB_FIELD_DB-TABCONTROL =
ZVI_FIELD_DB-TABCONTROL .
ZTB_FIELD_DB-TEXT_TARGET =
ZVI_FIELD_DB-TEXT_TARGET .
ZTB_FIELD_DB-TEXT_FIELD =
ZVI_FIELD_DB-TEXT_FIELD .
ZTB_FIELD_DB-CKSUBR =
ZVI_FIELD_DB-CKSUBR .
ZTB_FIELD_DB-INIT_FIELD =
ZVI_FIELD_DB-INIT_FIELD .
ZTB_FIELD_DB-SUBSCR =
ZVI_FIELD_DB-SUBSCR .
ZTB_FIELD_DB-LABELF =
ZVI_FIELD_DB-LABELF .
ZTB_FIELD_DB-SETLIST =
ZVI_FIELD_DB-SETLIST .
ZTB_FIELD_DB-SGROUP =
ZVI_FIELD_DB-SGROUP .
    IF SY-SUBRC = 0.
    UPDATE ZTB_FIELD_DB ##WARN_OK.
    ELSE.
    INSERT ZTB_FIELD_DB .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_FIELD_DB-UPD_FLAG,
STATUS_ZVI_FIELD_DB-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_FIELD_DB.
  SELECT SINGLE * FROM ZTB_FIELD_DB WHERE
REPID = ZVI_FIELD_DB-REPID AND
DYNNR = ZVI_FIELD_DB-DYNNR AND
CSTEP = ZVI_FIELD_DB-CSTEP AND
FPOSI = ZVI_FIELD_DB-FPOSI AND
FIELDNAME = ZVI_FIELD_DB-FIELDNAME .
ZVI_FIELD_DB-MANDT =
ZTB_FIELD_DB-MANDT .
ZVI_FIELD_DB-REPID =
ZTB_FIELD_DB-REPID .
ZVI_FIELD_DB-DYNNR =
ZTB_FIELD_DB-DYNNR .
ZVI_FIELD_DB-CSTEP =
ZTB_FIELD_DB-CSTEP .
ZVI_FIELD_DB-FPOSI =
ZTB_FIELD_DB-FPOSI .
ZVI_FIELD_DB-FIELDNAME =
ZTB_FIELD_DB-FIELDNAME .
ZVI_FIELD_DB-FIELDSTS =
ZTB_FIELD_DB-FIELDSTS .
ZVI_FIELD_DB-CHECK_INIT =
ZTB_FIELD_DB-CHECK_INIT .
ZVI_FIELD_DB-TABNAME =
ZTB_FIELD_DB-TABNAME .
ZVI_FIELD_DB-KEYF1 =
ZTB_FIELD_DB-KEYF1 .
ZVI_FIELD_DB-KEYF2 =
ZTB_FIELD_DB-KEYF2 .
ZVI_FIELD_DB-PRFIELD2 =
ZTB_FIELD_DB-PRFIELD2 .
ZVI_FIELD_DB-KEYF3 =
ZTB_FIELD_DB-KEYF3 .
ZVI_FIELD_DB-PRFIELD3 =
ZTB_FIELD_DB-PRFIELD3 .
ZVI_FIELD_DB-LOOPTAB =
ZTB_FIELD_DB-LOOPTAB .
ZVI_FIELD_DB-TABCONTROL =
ZTB_FIELD_DB-TABCONTROL .
ZVI_FIELD_DB-TEXT_TARGET =
ZTB_FIELD_DB-TEXT_TARGET .
ZVI_FIELD_DB-TEXT_FIELD =
ZTB_FIELD_DB-TEXT_FIELD .
ZVI_FIELD_DB-CKSUBR =
ZTB_FIELD_DB-CKSUBR .
ZVI_FIELD_DB-INIT_FIELD =
ZTB_FIELD_DB-INIT_FIELD .
ZVI_FIELD_DB-SUBSCR =
ZTB_FIELD_DB-SUBSCR .
ZVI_FIELD_DB-LABELF =
ZTB_FIELD_DB-LABELF .
ZVI_FIELD_DB-SETLIST =
ZTB_FIELD_DB-SETLIST .
ZVI_FIELD_DB-SGROUP =
ZTB_FIELD_DB-SGROUP .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_FIELD_DB USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_FIELD_DB-REPID TO
ZTB_FIELD_DB-REPID .
MOVE ZVI_FIELD_DB-DYNNR TO
ZTB_FIELD_DB-DYNNR .
MOVE ZVI_FIELD_DB-CSTEP TO
ZTB_FIELD_DB-CSTEP .
MOVE ZVI_FIELD_DB-FPOSI TO
ZTB_FIELD_DB-FPOSI .
MOVE ZVI_FIELD_DB-FIELDNAME TO
ZTB_FIELD_DB-FIELDNAME .
MOVE ZVI_FIELD_DB-MANDT TO
ZTB_FIELD_DB-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_FIELD_DB'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_FIELD_DB TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_FIELD_DB'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_FIELD_DESC..................................*
FORM GET_DATA_ZVI_FIELD_DESC.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_FIELD_DESC WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_FIELD_DESC .
ZVI_FIELD_DESC-MANDT =
ZTB_FIELD_DESC-MANDT .
ZVI_FIELD_DESC-REPID =
ZTB_FIELD_DESC-REPID .
ZVI_FIELD_DESC-DYNNR =
ZTB_FIELD_DESC-DYNNR .
ZVI_FIELD_DESC-FIELDNAME =
ZTB_FIELD_DESC-FIELDNAME .
ZVI_FIELD_DESC-FPOSI =
ZTB_FIELD_DESC-FPOSI .
ZVI_FIELD_DESC-TEXT_TARGET =
ZTB_FIELD_DESC-TEXT_TARGET .
ZVI_FIELD_DESC-TEXT_FIELD =
ZTB_FIELD_DESC-TEXT_FIELD .
<VIM_TOTAL_STRUC> = ZVI_FIELD_DESC.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_FIELD_DESC .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_FIELD_DESC.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_FIELD_DESC-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_FIELD_DESC WHERE
  REPID = ZVI_FIELD_DESC-REPID AND
  DYNNR = ZVI_FIELD_DESC-DYNNR AND
  FIELDNAME = ZVI_FIELD_DESC-FIELDNAME AND
  FPOSI = ZVI_FIELD_DESC-FPOSI .
    IF SY-SUBRC = 0.
    DELETE ZTB_FIELD_DESC .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_FIELD_DESC WHERE
  REPID = ZVI_FIELD_DESC-REPID AND
  DYNNR = ZVI_FIELD_DESC-DYNNR AND
  FIELDNAME = ZVI_FIELD_DESC-FIELDNAME AND
  FPOSI = ZVI_FIELD_DESC-FPOSI .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_FIELD_DESC.
    ENDIF.
ZTB_FIELD_DESC-MANDT =
ZVI_FIELD_DESC-MANDT .
ZTB_FIELD_DESC-REPID =
ZVI_FIELD_DESC-REPID .
ZTB_FIELD_DESC-DYNNR =
ZVI_FIELD_DESC-DYNNR .
ZTB_FIELD_DESC-FIELDNAME =
ZVI_FIELD_DESC-FIELDNAME .
ZTB_FIELD_DESC-FPOSI =
ZVI_FIELD_DESC-FPOSI .
ZTB_FIELD_DESC-TEXT_TARGET =
ZVI_FIELD_DESC-TEXT_TARGET .
ZTB_FIELD_DESC-TEXT_FIELD =
ZVI_FIELD_DESC-TEXT_FIELD .
    IF SY-SUBRC = 0.
    UPDATE ZTB_FIELD_DESC ##WARN_OK.
    ELSE.
    INSERT ZTB_FIELD_DESC .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_FIELD_DESC-UPD_FLAG,
STATUS_ZVI_FIELD_DESC-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_FIELD_DESC.
  SELECT SINGLE * FROM ZTB_FIELD_DESC WHERE
REPID = ZVI_FIELD_DESC-REPID AND
DYNNR = ZVI_FIELD_DESC-DYNNR AND
FIELDNAME = ZVI_FIELD_DESC-FIELDNAME AND
FPOSI = ZVI_FIELD_DESC-FPOSI .
ZVI_FIELD_DESC-MANDT =
ZTB_FIELD_DESC-MANDT .
ZVI_FIELD_DESC-REPID =
ZTB_FIELD_DESC-REPID .
ZVI_FIELD_DESC-DYNNR =
ZTB_FIELD_DESC-DYNNR .
ZVI_FIELD_DESC-FIELDNAME =
ZTB_FIELD_DESC-FIELDNAME .
ZVI_FIELD_DESC-FPOSI =
ZTB_FIELD_DESC-FPOSI .
ZVI_FIELD_DESC-TEXT_TARGET =
ZTB_FIELD_DESC-TEXT_TARGET .
ZVI_FIELD_DESC-TEXT_FIELD =
ZTB_FIELD_DESC-TEXT_FIELD .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_FIELD_DESC USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_FIELD_DESC-REPID TO
ZTB_FIELD_DESC-REPID .
MOVE ZVI_FIELD_DESC-DYNNR TO
ZTB_FIELD_DESC-DYNNR .
MOVE ZVI_FIELD_DESC-FIELDNAME TO
ZTB_FIELD_DESC-FIELDNAME .
MOVE ZVI_FIELD_DESC-FPOSI TO
ZTB_FIELD_DESC-FPOSI .
MOVE ZVI_FIELD_DESC-MANDT TO
ZTB_FIELD_DESC-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_FIELD_DESC'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_FIELD_DESC TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_FIELD_DESC'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_JBCF_JSTEP..................................*
FORM GET_DATA_ZVI_JBCF_JSTEP.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_JBCF_JSTEP WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_JBCF_JSTEP .
ZVI_JBCF_JSTEP-MANDT =
ZTB_JBCF_JSTEP-MANDT .
ZVI_JBCF_JSTEP-JOBNAME =
ZTB_JBCF_JSTEP-JOBNAME .
ZVI_JBCF_JSTEP-STEP =
ZTB_JBCF_JSTEP-STEP .
ZVI_JBCF_JSTEP-BTCPROG =
ZTB_JBCF_JSTEP-BTCPROG .
ZVI_JBCF_JSTEP-VARIANT =
ZTB_JBCF_JSTEP-VARIANT .
<VIM_TOTAL_STRUC> = ZVI_JBCF_JSTEP.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_JBCF_JSTEP .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_JBCF_JSTEP.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_JBCF_JSTEP-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_JBCF_JSTEP WHERE
  JOBNAME = ZVI_JBCF_JSTEP-JOBNAME AND
  STEP = ZVI_JBCF_JSTEP-STEP .
    IF SY-SUBRC = 0.
    DELETE ZTB_JBCF_JSTEP .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_JBCF_JSTEP WHERE
  JOBNAME = ZVI_JBCF_JSTEP-JOBNAME AND
  STEP = ZVI_JBCF_JSTEP-STEP .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_JBCF_JSTEP.
    ENDIF.
ZTB_JBCF_JSTEP-MANDT =
ZVI_JBCF_JSTEP-MANDT .
ZTB_JBCF_JSTEP-JOBNAME =
ZVI_JBCF_JSTEP-JOBNAME .
ZTB_JBCF_JSTEP-STEP =
ZVI_JBCF_JSTEP-STEP .
ZTB_JBCF_JSTEP-BTCPROG =
ZVI_JBCF_JSTEP-BTCPROG .
ZTB_JBCF_JSTEP-VARIANT =
ZVI_JBCF_JSTEP-VARIANT .
    IF SY-SUBRC = 0.
    UPDATE ZTB_JBCF_JSTEP ##WARN_OK.
    ELSE.
    INSERT ZTB_JBCF_JSTEP .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_JBCF_JSTEP-UPD_FLAG,
STATUS_ZVI_JBCF_JSTEP-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_JBCF_JSTEP.
  SELECT SINGLE * FROM ZTB_JBCF_JSTEP WHERE
JOBNAME = ZVI_JBCF_JSTEP-JOBNAME AND
STEP = ZVI_JBCF_JSTEP-STEP .
ZVI_JBCF_JSTEP-MANDT =
ZTB_JBCF_JSTEP-MANDT .
ZVI_JBCF_JSTEP-JOBNAME =
ZTB_JBCF_JSTEP-JOBNAME .
ZVI_JBCF_JSTEP-STEP =
ZTB_JBCF_JSTEP-STEP .
ZVI_JBCF_JSTEP-BTCPROG =
ZTB_JBCF_JSTEP-BTCPROG .
ZVI_JBCF_JSTEP-VARIANT =
ZTB_JBCF_JSTEP-VARIANT .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_JBCF_JSTEP USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_JBCF_JSTEP-JOBNAME TO
ZTB_JBCF_JSTEP-JOBNAME .
MOVE ZVI_JBCF_JSTEP-STEP TO
ZTB_JBCF_JSTEP-STEP .
MOVE ZVI_JBCF_JSTEP-MANDT TO
ZTB_JBCF_JSTEP-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_JBCF_JSTEP'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_JBCF_JSTEP TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_JBCF_JSTEP'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_MAP_SELSCR..................................*
FORM GET_DATA_ZVI_MAP_SELSCR.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_MAP_SELSCR WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_MAP_SELSCR .
ZVI_MAP_SELSCR-MANDT =
ZTB_MAP_SELSCR-MANDT .
ZVI_MAP_SELSCR-CPROG =
ZTB_MAP_SELSCR-CPROG .
ZVI_MAP_SELSCR-SPROG =
ZTB_MAP_SELSCR-SPROG .
ZVI_MAP_SELSCR-CPFNM =
ZTB_MAP_SELSCR-CPFNM .
ZVI_MAP_SELSCR-SPFNM =
ZTB_MAP_SELSCR-SPFNM .
ZVI_MAP_SELSCR-CPFTY =
ZTB_MAP_SELSCR-CPFTY .
ZVI_MAP_SELSCR-SPFTY =
ZTB_MAP_SELSCR-SPFTY .
<VIM_TOTAL_STRUC> = ZVI_MAP_SELSCR.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_MAP_SELSCR .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_MAP_SELSCR.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_MAP_SELSCR-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MAP_SELSCR WHERE
  CPROG = ZVI_MAP_SELSCR-CPROG AND
  SPROG = ZVI_MAP_SELSCR-SPROG AND
  CPFNM = ZVI_MAP_SELSCR-CPFNM AND
  SPFNM = ZVI_MAP_SELSCR-SPFNM .
    IF SY-SUBRC = 0.
    DELETE ZTB_MAP_SELSCR .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MAP_SELSCR WHERE
  CPROG = ZVI_MAP_SELSCR-CPROG AND
  SPROG = ZVI_MAP_SELSCR-SPROG AND
  CPFNM = ZVI_MAP_SELSCR-CPFNM AND
  SPFNM = ZVI_MAP_SELSCR-SPFNM .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_MAP_SELSCR.
    ENDIF.
ZTB_MAP_SELSCR-MANDT =
ZVI_MAP_SELSCR-MANDT .
ZTB_MAP_SELSCR-CPROG =
ZVI_MAP_SELSCR-CPROG .
ZTB_MAP_SELSCR-SPROG =
ZVI_MAP_SELSCR-SPROG .
ZTB_MAP_SELSCR-CPFNM =
ZVI_MAP_SELSCR-CPFNM .
ZTB_MAP_SELSCR-SPFNM =
ZVI_MAP_SELSCR-SPFNM .
ZTB_MAP_SELSCR-CPFTY =
ZVI_MAP_SELSCR-CPFTY .
ZTB_MAP_SELSCR-SPFTY =
ZVI_MAP_SELSCR-SPFTY .
    IF SY-SUBRC = 0.
    UPDATE ZTB_MAP_SELSCR ##WARN_OK.
    ELSE.
    INSERT ZTB_MAP_SELSCR .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_MAP_SELSCR-UPD_FLAG,
STATUS_ZVI_MAP_SELSCR-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_MAP_SELSCR.
  SELECT SINGLE * FROM ZTB_MAP_SELSCR WHERE
CPROG = ZVI_MAP_SELSCR-CPROG AND
SPROG = ZVI_MAP_SELSCR-SPROG AND
CPFNM = ZVI_MAP_SELSCR-CPFNM AND
SPFNM = ZVI_MAP_SELSCR-SPFNM .
ZVI_MAP_SELSCR-MANDT =
ZTB_MAP_SELSCR-MANDT .
ZVI_MAP_SELSCR-CPROG =
ZTB_MAP_SELSCR-CPROG .
ZVI_MAP_SELSCR-SPROG =
ZTB_MAP_SELSCR-SPROG .
ZVI_MAP_SELSCR-CPFNM =
ZTB_MAP_SELSCR-CPFNM .
ZVI_MAP_SELSCR-SPFNM =
ZTB_MAP_SELSCR-SPFNM .
ZVI_MAP_SELSCR-CPFTY =
ZTB_MAP_SELSCR-CPFTY .
ZVI_MAP_SELSCR-SPFTY =
ZTB_MAP_SELSCR-SPFTY .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_MAP_SELSCR USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_MAP_SELSCR-CPROG TO
ZTB_MAP_SELSCR-CPROG .
MOVE ZVI_MAP_SELSCR-SPROG TO
ZTB_MAP_SELSCR-SPROG .
MOVE ZVI_MAP_SELSCR-CPFNM TO
ZTB_MAP_SELSCR-CPFNM .
MOVE ZVI_MAP_SELSCR-SPFNM TO
ZTB_MAP_SELSCR-SPFNM .
MOVE ZVI_MAP_SELSCR-MANDT TO
ZTB_MAP_SELSCR-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_MAP_SELSCR'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_MAP_SELSCR TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_MAP_SELSCR'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_MC_BUSELE...................................*
FORM GET_DATA_ZVI_MC_BUSELE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_MC_BUSELE WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_MC_BUSELE .
ZVI_MC_BUSELE-MANDT =
ZTB_MC_BUSELE-MANDT .
ZVI_MC_BUSELE-MCBAID =
ZTB_MC_BUSELE-MCBAID .
ZVI_MC_BUSELE-MCBAELID =
ZTB_MC_BUSELE-MCBAELID .
ZVI_MC_BUSELE-STRUNAME =
ZTB_MC_BUSELE-STRUNAME .
ZVI_MC_BUSELE-ISITEM =
ZTB_MC_BUSELE-ISITEM .
ZVI_MC_BUSELE-ISREF =
ZTB_MC_BUSELE-ISREF .
<VIM_TOTAL_STRUC> = ZVI_MC_BUSELE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_MC_BUSELE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_MC_BUSELE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_MC_BUSELE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MC_BUSELE WHERE
  MCBAID = ZVI_MC_BUSELE-MCBAID AND
  MCBAELID = ZVI_MC_BUSELE-MCBAELID .
    IF SY-SUBRC = 0.
    DELETE ZTB_MC_BUSELE .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MC_BUSELE WHERE
  MCBAID = ZVI_MC_BUSELE-MCBAID AND
  MCBAELID = ZVI_MC_BUSELE-MCBAELID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_MC_BUSELE.
    ENDIF.
ZTB_MC_BUSELE-MANDT =
ZVI_MC_BUSELE-MANDT .
ZTB_MC_BUSELE-MCBAID =
ZVI_MC_BUSELE-MCBAID .
ZTB_MC_BUSELE-MCBAELID =
ZVI_MC_BUSELE-MCBAELID .
ZTB_MC_BUSELE-STRUNAME =
ZVI_MC_BUSELE-STRUNAME .
ZTB_MC_BUSELE-ISITEM =
ZVI_MC_BUSELE-ISITEM .
ZTB_MC_BUSELE-ISREF =
ZVI_MC_BUSELE-ISREF .
    IF SY-SUBRC = 0.
    UPDATE ZTB_MC_BUSELE ##WARN_OK.
    ELSE.
    INSERT ZTB_MC_BUSELE .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_MC_BUSELE-UPD_FLAG,
STATUS_ZVI_MC_BUSELE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_MC_BUSELE.
  SELECT SINGLE * FROM ZTB_MC_BUSELE WHERE
MCBAID = ZVI_MC_BUSELE-MCBAID AND
MCBAELID = ZVI_MC_BUSELE-MCBAELID .
ZVI_MC_BUSELE-MANDT =
ZTB_MC_BUSELE-MANDT .
ZVI_MC_BUSELE-MCBAID =
ZTB_MC_BUSELE-MCBAID .
ZVI_MC_BUSELE-MCBAELID =
ZTB_MC_BUSELE-MCBAELID .
ZVI_MC_BUSELE-STRUNAME =
ZTB_MC_BUSELE-STRUNAME .
ZVI_MC_BUSELE-ISITEM =
ZTB_MC_BUSELE-ISITEM .
ZVI_MC_BUSELE-ISREF =
ZTB_MC_BUSELE-ISREF .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_MC_BUSELE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_MC_BUSELE-MCBAID TO
ZTB_MC_BUSELE-MCBAID .
MOVE ZVI_MC_BUSELE-MCBAELID TO
ZTB_MC_BUSELE-MCBAELID .
MOVE ZVI_MC_BUSELE-MANDT TO
ZTB_MC_BUSELE-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_MC_BUSELE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_MC_BUSELE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_MC_BUSELE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_MC_BUSFLD...................................*
FORM GET_DATA_ZVI_MC_BUSFLD.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_MC_BUSFLD WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_MC_BUSFLD .
ZVI_MC_BUSFLD-MANDT =
ZTB_MC_BUSFLD-MANDT .
ZVI_MC_BUSFLD-MCBAID =
ZTB_MC_BUSFLD-MCBAID .
ZVI_MC_BUSFLD-MCBAELID =
ZTB_MC_BUSFLD-MCBAELID .
ZVI_MC_BUSFLD-FPOSI =
ZTB_MC_BUSFLD-FPOSI .
ZVI_MC_BUSFLD-FIELDNAME =
ZTB_MC_BUSFLD-FIELDNAME .
ZVI_MC_BUSFLD-MCTYP =
ZTB_MC_BUSFLD-MCTYP .
ZVI_MC_BUSFLD-FIELDVAL =
ZTB_MC_BUSFLD-FIELDVAL .
ZVI_MC_BUSFLD-MCMAPID =
ZTB_MC_BUSFLD-MCMAPID .
ZVI_MC_BUSFLD-KEYGRP =
ZTB_MC_BUSFLD-KEYGRP .
ZVI_MC_BUSFLD-FUNCNAME =
ZTB_MC_BUSFLD-FUNCNAME .
<VIM_TOTAL_STRUC> = ZVI_MC_BUSFLD.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_MC_BUSFLD .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_MC_BUSFLD.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_MC_BUSFLD-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MC_BUSFLD WHERE
  MCBAID = ZVI_MC_BUSFLD-MCBAID AND
  MCBAELID = ZVI_MC_BUSFLD-MCBAELID AND
  FPOSI = ZVI_MC_BUSFLD-FPOSI .
    IF SY-SUBRC = 0.
    DELETE ZTB_MC_BUSFLD .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MC_BUSFLD WHERE
  MCBAID = ZVI_MC_BUSFLD-MCBAID AND
  MCBAELID = ZVI_MC_BUSFLD-MCBAELID AND
  FPOSI = ZVI_MC_BUSFLD-FPOSI .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_MC_BUSFLD.
    ENDIF.
ZTB_MC_BUSFLD-MANDT =
ZVI_MC_BUSFLD-MANDT .
ZTB_MC_BUSFLD-MCBAID =
ZVI_MC_BUSFLD-MCBAID .
ZTB_MC_BUSFLD-MCBAELID =
ZVI_MC_BUSFLD-MCBAELID .
ZTB_MC_BUSFLD-FPOSI =
ZVI_MC_BUSFLD-FPOSI .
ZTB_MC_BUSFLD-FIELDNAME =
ZVI_MC_BUSFLD-FIELDNAME .
ZTB_MC_BUSFLD-MCTYP =
ZVI_MC_BUSFLD-MCTYP .
ZTB_MC_BUSFLD-FIELDVAL =
ZVI_MC_BUSFLD-FIELDVAL .
ZTB_MC_BUSFLD-MCMAPID =
ZVI_MC_BUSFLD-MCMAPID .
ZTB_MC_BUSFLD-KEYGRP =
ZVI_MC_BUSFLD-KEYGRP .
ZTB_MC_BUSFLD-FUNCNAME =
ZVI_MC_BUSFLD-FUNCNAME .
    IF SY-SUBRC = 0.
    UPDATE ZTB_MC_BUSFLD ##WARN_OK.
    ELSE.
    INSERT ZTB_MC_BUSFLD .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_MC_BUSFLD-UPD_FLAG,
STATUS_ZVI_MC_BUSFLD-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_MC_BUSFLD.
  SELECT SINGLE * FROM ZTB_MC_BUSFLD WHERE
MCBAID = ZVI_MC_BUSFLD-MCBAID AND
MCBAELID = ZVI_MC_BUSFLD-MCBAELID AND
FPOSI = ZVI_MC_BUSFLD-FPOSI .
ZVI_MC_BUSFLD-MANDT =
ZTB_MC_BUSFLD-MANDT .
ZVI_MC_BUSFLD-MCBAID =
ZTB_MC_BUSFLD-MCBAID .
ZVI_MC_BUSFLD-MCBAELID =
ZTB_MC_BUSFLD-MCBAELID .
ZVI_MC_BUSFLD-FPOSI =
ZTB_MC_BUSFLD-FPOSI .
ZVI_MC_BUSFLD-FIELDNAME =
ZTB_MC_BUSFLD-FIELDNAME .
ZVI_MC_BUSFLD-MCTYP =
ZTB_MC_BUSFLD-MCTYP .
ZVI_MC_BUSFLD-FIELDVAL =
ZTB_MC_BUSFLD-FIELDVAL .
ZVI_MC_BUSFLD-MCMAPID =
ZTB_MC_BUSFLD-MCMAPID .
ZVI_MC_BUSFLD-KEYGRP =
ZTB_MC_BUSFLD-KEYGRP .
ZVI_MC_BUSFLD-FUNCNAME =
ZTB_MC_BUSFLD-FUNCNAME .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_MC_BUSFLD USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_MC_BUSFLD-MCBAID TO
ZTB_MC_BUSFLD-MCBAID .
MOVE ZVI_MC_BUSFLD-MCBAELID TO
ZTB_MC_BUSFLD-MCBAELID .
MOVE ZVI_MC_BUSFLD-FPOSI TO
ZTB_MC_BUSFLD-FPOSI .
MOVE ZVI_MC_BUSFLD-MANDT TO
ZTB_MC_BUSFLD-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_MC_BUSFLD'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_MC_BUSFLD TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_MC_BUSFLD'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_MC_BUSKEYE..................................*
FORM GET_DATA_ZVI_MC_BUSKEYE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_MC_BUSKEYE WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_MC_BUSKEYE .
ZVI_MC_BUSKEYE-MANDT =
ZTB_MC_BUSKEYE-MANDT .
ZVI_MC_BUSKEYE-KEYGRP =
ZTB_MC_BUSKEYE-KEYGRP .
ZVI_MC_BUSKEYE-FPOSI =
ZTB_MC_BUSKEYE-FPOSI .
ZVI_MC_BUSKEYE-FIELDNAME =
ZTB_MC_BUSKEYE-FIELDNAME .
<VIM_TOTAL_STRUC> = ZVI_MC_BUSKEYE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_MC_BUSKEYE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_MC_BUSKEYE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_MC_BUSKEYE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MC_BUSKEYE WHERE
  KEYGRP = ZVI_MC_BUSKEYE-KEYGRP AND
  FPOSI = ZVI_MC_BUSKEYE-FPOSI .
    IF SY-SUBRC = 0.
    DELETE ZTB_MC_BUSKEYE .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MC_BUSKEYE WHERE
  KEYGRP = ZVI_MC_BUSKEYE-KEYGRP AND
  FPOSI = ZVI_MC_BUSKEYE-FPOSI .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_MC_BUSKEYE.
    ENDIF.
ZTB_MC_BUSKEYE-MANDT =
ZVI_MC_BUSKEYE-MANDT .
ZTB_MC_BUSKEYE-KEYGRP =
ZVI_MC_BUSKEYE-KEYGRP .
ZTB_MC_BUSKEYE-FPOSI =
ZVI_MC_BUSKEYE-FPOSI .
ZTB_MC_BUSKEYE-FIELDNAME =
ZVI_MC_BUSKEYE-FIELDNAME .
    IF SY-SUBRC = 0.
    UPDATE ZTB_MC_BUSKEYE ##WARN_OK.
    ELSE.
    INSERT ZTB_MC_BUSKEYE .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_MC_BUSKEYE-UPD_FLAG,
STATUS_ZVI_MC_BUSKEYE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_MC_BUSKEYE.
  SELECT SINGLE * FROM ZTB_MC_BUSKEYE WHERE
KEYGRP = ZVI_MC_BUSKEYE-KEYGRP AND
FPOSI = ZVI_MC_BUSKEYE-FPOSI .
ZVI_MC_BUSKEYE-MANDT =
ZTB_MC_BUSKEYE-MANDT .
ZVI_MC_BUSKEYE-KEYGRP =
ZTB_MC_BUSKEYE-KEYGRP .
ZVI_MC_BUSKEYE-FPOSI =
ZTB_MC_BUSKEYE-FPOSI .
ZVI_MC_BUSKEYE-FIELDNAME =
ZTB_MC_BUSKEYE-FIELDNAME .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_MC_BUSKEYE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_MC_BUSKEYE-KEYGRP TO
ZTB_MC_BUSKEYE-KEYGRP .
MOVE ZVI_MC_BUSKEYE-FPOSI TO
ZTB_MC_BUSKEYE-FPOSI .
MOVE ZVI_MC_BUSKEYE-MANDT TO
ZTB_MC_BUSKEYE-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_MC_BUSKEYE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_MC_BUSKEYE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_MC_BUSKEYE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_MC_BUSKEYM..................................*
FORM GET_DATA_ZVI_MC_BUSKEYM.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_MC_BUSKEYGM WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_MC_BUSKEYM .
ZVI_MC_BUSKEYM-MANDT =
ZTB_MC_BUSKEYGM-MANDT .
ZVI_MC_BUSKEYM-KEYGRP =
ZTB_MC_BUSKEYGM-KEYGRP .
ZVI_MC_BUSKEYM-FPOSI =
ZTB_MC_BUSKEYGM-FPOSI .
ZVI_MC_BUSKEYM-KEYGVAL =
ZTB_MC_BUSKEYGM-KEYGVAL .
ZVI_MC_BUSKEYM-TOVALUE =
ZTB_MC_BUSKEYGM-TOVALUE .
<VIM_TOTAL_STRUC> = ZVI_MC_BUSKEYM.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_MC_BUSKEYM .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_MC_BUSKEYM.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_MC_BUSKEYM-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MC_BUSKEYGM WHERE
  KEYGRP = ZVI_MC_BUSKEYM-KEYGRP AND
  FPOSI = ZVI_MC_BUSKEYM-FPOSI .
    IF SY-SUBRC = 0.
    DELETE ZTB_MC_BUSKEYGM .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MC_BUSKEYGM WHERE
  KEYGRP = ZVI_MC_BUSKEYM-KEYGRP AND
  FPOSI = ZVI_MC_BUSKEYM-FPOSI .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_MC_BUSKEYGM.
    ENDIF.
ZTB_MC_BUSKEYGM-MANDT =
ZVI_MC_BUSKEYM-MANDT .
ZTB_MC_BUSKEYGM-KEYGRP =
ZVI_MC_BUSKEYM-KEYGRP .
ZTB_MC_BUSKEYGM-FPOSI =
ZVI_MC_BUSKEYM-FPOSI .
ZTB_MC_BUSKEYGM-KEYGVAL =
ZVI_MC_BUSKEYM-KEYGVAL .
ZTB_MC_BUSKEYGM-TOVALUE =
ZVI_MC_BUSKEYM-TOVALUE .
    IF SY-SUBRC = 0.
    UPDATE ZTB_MC_BUSKEYGM ##WARN_OK.
    ELSE.
    INSERT ZTB_MC_BUSKEYGM .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_MC_BUSKEYM-UPD_FLAG,
STATUS_ZVI_MC_BUSKEYM-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_MC_BUSKEYM.
  SELECT SINGLE * FROM ZTB_MC_BUSKEYGM WHERE
KEYGRP = ZVI_MC_BUSKEYM-KEYGRP AND
FPOSI = ZVI_MC_BUSKEYM-FPOSI .
ZVI_MC_BUSKEYM-MANDT =
ZTB_MC_BUSKEYGM-MANDT .
ZVI_MC_BUSKEYM-KEYGRP =
ZTB_MC_BUSKEYGM-KEYGRP .
ZVI_MC_BUSKEYM-FPOSI =
ZTB_MC_BUSKEYGM-FPOSI .
ZVI_MC_BUSKEYM-KEYGVAL =
ZTB_MC_BUSKEYGM-KEYGVAL .
ZVI_MC_BUSKEYM-TOVALUE =
ZTB_MC_BUSKEYGM-TOVALUE .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_MC_BUSKEYM USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_MC_BUSKEYM-KEYGRP TO
ZTB_MC_BUSKEYGM-KEYGRP .
MOVE ZVI_MC_BUSKEYM-FPOSI TO
ZTB_MC_BUSKEYGM-FPOSI .
MOVE ZVI_MC_BUSKEYM-MANDT TO
ZTB_MC_BUSKEYGM-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_MC_BUSKEYGM'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_MC_BUSKEYGM TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_MC_BUSKEYGM'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_MC_BUSMAP...................................*
FORM GET_DATA_ZVI_MC_BUSMAP.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_MC_BUSMAP WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_MC_BUSMAP .
ZVI_MC_BUSMAP-MANDT =
ZTB_MC_BUSMAP-MANDT .
ZVI_MC_BUSMAP-MCMAPID =
ZTB_MC_BUSMAP-MCMAPID .
ZVI_MC_BUSMAP-MCFRVAL =
ZTB_MC_BUSMAP-MCFRVAL .
ZVI_MC_BUSMAP-MCTOVAL =
ZTB_MC_BUSMAP-MCTOVAL .
<VIM_TOTAL_STRUC> = ZVI_MC_BUSMAP.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_MC_BUSMAP .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_MC_BUSMAP.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_MC_BUSMAP-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MC_BUSMAP WHERE
  MCMAPID = ZVI_MC_BUSMAP-MCMAPID AND
  MCFRVAL = ZVI_MC_BUSMAP-MCFRVAL .
    IF SY-SUBRC = 0.
    DELETE ZTB_MC_BUSMAP .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MC_BUSMAP WHERE
  MCMAPID = ZVI_MC_BUSMAP-MCMAPID AND
  MCFRVAL = ZVI_MC_BUSMAP-MCFRVAL .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_MC_BUSMAP.
    ENDIF.
ZTB_MC_BUSMAP-MANDT =
ZVI_MC_BUSMAP-MANDT .
ZTB_MC_BUSMAP-MCMAPID =
ZVI_MC_BUSMAP-MCMAPID .
ZTB_MC_BUSMAP-MCFRVAL =
ZVI_MC_BUSMAP-MCFRVAL .
ZTB_MC_BUSMAP-MCTOVAL =
ZVI_MC_BUSMAP-MCTOVAL .
    IF SY-SUBRC = 0.
    UPDATE ZTB_MC_BUSMAP ##WARN_OK.
    ELSE.
    INSERT ZTB_MC_BUSMAP .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_MC_BUSMAP-UPD_FLAG,
STATUS_ZVI_MC_BUSMAP-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_MC_BUSMAP.
  SELECT SINGLE * FROM ZTB_MC_BUSMAP WHERE
MCMAPID = ZVI_MC_BUSMAP-MCMAPID AND
MCFRVAL = ZVI_MC_BUSMAP-MCFRVAL .
ZVI_MC_BUSMAP-MANDT =
ZTB_MC_BUSMAP-MANDT .
ZVI_MC_BUSMAP-MCMAPID =
ZTB_MC_BUSMAP-MCMAPID .
ZVI_MC_BUSMAP-MCFRVAL =
ZTB_MC_BUSMAP-MCFRVAL .
ZVI_MC_BUSMAP-MCTOVAL =
ZTB_MC_BUSMAP-MCTOVAL .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_MC_BUSMAP USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_MC_BUSMAP-MCMAPID TO
ZTB_MC_BUSMAP-MCMAPID .
MOVE ZVI_MC_BUSMAP-MCFRVAL TO
ZTB_MC_BUSMAP-MCFRVAL .
MOVE ZVI_MC_BUSMAP-MANDT TO
ZTB_MC_BUSMAP-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_MC_BUSMAP'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_MC_BUSMAP TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_MC_BUSMAP'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_MC_BUSTABF..................................*
FORM GET_DATA_ZVI_MC_BUSTABF.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_MC_BUSTABF WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_MC_BUSTABF .
ZVI_MC_BUSTABF-MANDT =
ZTB_MC_BUSTABF-MANDT .
ZVI_MC_BUSTABF-TABNAME =
ZTB_MC_BUSTABF-TABNAME .
ZVI_MC_BUSTABF-TABMCID =
ZTB_MC_BUSTABF-TABMCID .
ZVI_MC_BUSTABF-FPOSI =
ZTB_MC_BUSTABF-FPOSI .
ZVI_MC_BUSTABF-FIELDNAME =
ZTB_MC_BUSTABF-FIELDNAME .
ZVI_MC_BUSTABF-MCTYP =
ZTB_MC_BUSTABF-MCTYP .
ZVI_MC_BUSTABF-FIELDVAL =
ZTB_MC_BUSTABF-FIELDVAL .
ZVI_MC_BUSTABF-MCMAPID =
ZTB_MC_BUSTABF-MCMAPID .
ZVI_MC_BUSTABF-FUNCNAME =
ZTB_MC_BUSTABF-FUNCNAME .
ZVI_MC_BUSTABF-KEYGRP =
ZTB_MC_BUSTABF-KEYGRP .
<VIM_TOTAL_STRUC> = ZVI_MC_BUSTABF.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_MC_BUSTABF .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_MC_BUSTABF.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_MC_BUSTABF-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MC_BUSTABF WHERE
  TABNAME = ZVI_MC_BUSTABF-TABNAME AND
  TABMCID = ZVI_MC_BUSTABF-TABMCID AND
  FPOSI = ZVI_MC_BUSTABF-FPOSI .
    IF SY-SUBRC = 0.
    DELETE ZTB_MC_BUSTABF .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_MC_BUSTABF WHERE
  TABNAME = ZVI_MC_BUSTABF-TABNAME AND
  TABMCID = ZVI_MC_BUSTABF-TABMCID AND
  FPOSI = ZVI_MC_BUSTABF-FPOSI .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_MC_BUSTABF.
    ENDIF.
ZTB_MC_BUSTABF-MANDT =
ZVI_MC_BUSTABF-MANDT .
ZTB_MC_BUSTABF-TABNAME =
ZVI_MC_BUSTABF-TABNAME .
ZTB_MC_BUSTABF-TABMCID =
ZVI_MC_BUSTABF-TABMCID .
ZTB_MC_BUSTABF-FPOSI =
ZVI_MC_BUSTABF-FPOSI .
ZTB_MC_BUSTABF-FIELDNAME =
ZVI_MC_BUSTABF-FIELDNAME .
ZTB_MC_BUSTABF-MCTYP =
ZVI_MC_BUSTABF-MCTYP .
ZTB_MC_BUSTABF-FIELDVAL =
ZVI_MC_BUSTABF-FIELDVAL .
ZTB_MC_BUSTABF-MCMAPID =
ZVI_MC_BUSTABF-MCMAPID .
ZTB_MC_BUSTABF-FUNCNAME =
ZVI_MC_BUSTABF-FUNCNAME .
ZTB_MC_BUSTABF-KEYGRP =
ZVI_MC_BUSTABF-KEYGRP .
    IF SY-SUBRC = 0.
    UPDATE ZTB_MC_BUSTABF ##WARN_OK.
    ELSE.
    INSERT ZTB_MC_BUSTABF .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_MC_BUSTABF-UPD_FLAG,
STATUS_ZVI_MC_BUSTABF-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_MC_BUSTABF.
  SELECT SINGLE * FROM ZTB_MC_BUSTABF WHERE
TABNAME = ZVI_MC_BUSTABF-TABNAME AND
TABMCID = ZVI_MC_BUSTABF-TABMCID AND
FPOSI = ZVI_MC_BUSTABF-FPOSI .
ZVI_MC_BUSTABF-MANDT =
ZTB_MC_BUSTABF-MANDT .
ZVI_MC_BUSTABF-TABNAME =
ZTB_MC_BUSTABF-TABNAME .
ZVI_MC_BUSTABF-TABMCID =
ZTB_MC_BUSTABF-TABMCID .
ZVI_MC_BUSTABF-FPOSI =
ZTB_MC_BUSTABF-FPOSI .
ZVI_MC_BUSTABF-FIELDNAME =
ZTB_MC_BUSTABF-FIELDNAME .
ZVI_MC_BUSTABF-MCTYP =
ZTB_MC_BUSTABF-MCTYP .
ZVI_MC_BUSTABF-FIELDVAL =
ZTB_MC_BUSTABF-FIELDVAL .
ZVI_MC_BUSTABF-MCMAPID =
ZTB_MC_BUSTABF-MCMAPID .
ZVI_MC_BUSTABF-FUNCNAME =
ZTB_MC_BUSTABF-FUNCNAME .
ZVI_MC_BUSTABF-KEYGRP =
ZTB_MC_BUSTABF-KEYGRP .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_MC_BUSTABF USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_MC_BUSTABF-TABNAME TO
ZTB_MC_BUSTABF-TABNAME .
MOVE ZVI_MC_BUSTABF-TABMCID TO
ZTB_MC_BUSTABF-TABMCID .
MOVE ZVI_MC_BUSTABF-FPOSI TO
ZTB_MC_BUSTABF-FPOSI .
MOVE ZVI_MC_BUSTABF-MANDT TO
ZTB_MC_BUSTABF-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_MC_BUSTABF'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_MC_BUSTABF TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_MC_BUSTABF'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_PROG........................................*
FORM GET_DATA_ZVI_PROG.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_PROG WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_PROG .
ZVI_PROG-MANDT =
ZTB_PROG-MANDT .
ZVI_PROG-REPID =
ZTB_PROG-REPID .
ZVI_PROG-LOGICAL_FILE =
ZTB_PROG-LOGICAL_FILE .
ZVI_PROG-CFSIGN =
ZTB_PROG-CFSIGN .
ZVI_PROG-CFEX1S =
ZTB_PROG-CFEX1S .
ZVI_PROG-CFEXMS =
ZTB_PROG-CFEXMS .
ZVI_PROG-CFALV =
ZTB_PROG-CFALV .
ZVI_PROG-CFFSTS =
ZTB_PROG-CFFSTS .
<VIM_TOTAL_STRUC> = ZVI_PROG.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_PROG .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_PROG.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_PROG-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_PROG WHERE
  REPID = ZVI_PROG-REPID .
    IF SY-SUBRC = 0.
    DELETE ZTB_PROG .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_PROG WHERE
  REPID = ZVI_PROG-REPID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_PROG.
    ENDIF.
ZTB_PROG-MANDT =
ZVI_PROG-MANDT .
ZTB_PROG-REPID =
ZVI_PROG-REPID .
ZTB_PROG-LOGICAL_FILE =
ZVI_PROG-LOGICAL_FILE .
ZTB_PROG-CFSIGN =
ZVI_PROG-CFSIGN .
ZTB_PROG-CFEX1S =
ZVI_PROG-CFEX1S .
ZTB_PROG-CFEXMS =
ZVI_PROG-CFEXMS .
ZTB_PROG-CFALV =
ZVI_PROG-CFALV .
ZTB_PROG-CFFSTS =
ZVI_PROG-CFFSTS .
    IF SY-SUBRC = 0.
    UPDATE ZTB_PROG ##WARN_OK.
    ELSE.
    INSERT ZTB_PROG .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_PROG-UPD_FLAG,
STATUS_ZVI_PROG-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZVI_PROG.
  SELECT SINGLE * FROM ZTB_PROG WHERE
REPID = ZVI_PROG-REPID .
ZVI_PROG-MANDT =
ZTB_PROG-MANDT .
ZVI_PROG-REPID =
ZTB_PROG-REPID .
ZVI_PROG-LOGICAL_FILE =
ZTB_PROG-LOGICAL_FILE .
ZVI_PROG-CFSIGN =
ZTB_PROG-CFSIGN .
ZVI_PROG-CFEX1S =
ZTB_PROG-CFEX1S .
ZVI_PROG-CFEXMS =
ZTB_PROG-CFEXMS .
ZVI_PROG-CFALV =
ZTB_PROG-CFALV .
ZVI_PROG-CFFSTS =
ZTB_PROG-CFFSTS .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_PROG USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_PROG-REPID TO
ZTB_PROG-REPID .
MOVE ZVI_PROG-MANDT TO
ZTB_PROG-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_PROG'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_PROG TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_PROG'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_PROG_FLOW...................................*
FORM GET_DATA_ZVI_PROG_FLOW.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_PROG_FLOW WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_PROG_FLOW .
ZVI_PROG_FLOW-MANDT =
ZTB_PROG_FLOW-MANDT .
ZVI_PROG_FLOW-REPID =
ZTB_PROG_FLOW-REPID .
ZVI_PROG_FLOW-DYNNR =
ZTB_PROG_FLOW-DYNNR .
ZVI_PROG_FLOW-PRIORITY =
ZTB_PROG_FLOW-PRIORITY .
ZVI_PROG_FLOW-SUBROUTINE =
ZTB_PROG_FLOW-SUBROUTINE .
ZVI_PROG_FLOW-EVENTTYPE =
ZTB_PROG_FLOW-EVENTTYPE .
ZVI_PROG_FLOW-DISABLED =
ZTB_PROG_FLOW-DISABLED .
<VIM_TOTAL_STRUC> = ZVI_PROG_FLOW.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_PROG_FLOW .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_PROG_FLOW.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_PROG_FLOW-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_PROG_FLOW WHERE
  REPID = ZVI_PROG_FLOW-REPID AND
  DYNNR = ZVI_PROG_FLOW-DYNNR AND
  PRIORITY = ZVI_PROG_FLOW-PRIORITY .
    IF SY-SUBRC = 0.
    DELETE ZTB_PROG_FLOW .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_PROG_FLOW WHERE
  REPID = ZVI_PROG_FLOW-REPID AND
  DYNNR = ZVI_PROG_FLOW-DYNNR AND
  PRIORITY = ZVI_PROG_FLOW-PRIORITY .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_PROG_FLOW.
    ENDIF.
ZTB_PROG_FLOW-MANDT =
ZVI_PROG_FLOW-MANDT .
ZTB_PROG_FLOW-REPID =
ZVI_PROG_FLOW-REPID .
ZTB_PROG_FLOW-DYNNR =
ZVI_PROG_FLOW-DYNNR .
ZTB_PROG_FLOW-PRIORITY =
ZVI_PROG_FLOW-PRIORITY .
ZTB_PROG_FLOW-SUBROUTINE =
ZVI_PROG_FLOW-SUBROUTINE .
ZTB_PROG_FLOW-EVENTTYPE =
ZVI_PROG_FLOW-EVENTTYPE .
ZTB_PROG_FLOW-DISABLED =
ZVI_PROG_FLOW-DISABLED .
    IF SY-SUBRC = 0.
    UPDATE ZTB_PROG_FLOW ##WARN_OK.
    ELSE.
    INSERT ZTB_PROG_FLOW .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_PROG_FLOW-UPD_FLAG,
STATUS_ZVI_PROG_FLOW-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_PROG_FLOW.
  SELECT SINGLE * FROM ZTB_PROG_FLOW WHERE
REPID = ZVI_PROG_FLOW-REPID AND
DYNNR = ZVI_PROG_FLOW-DYNNR AND
PRIORITY = ZVI_PROG_FLOW-PRIORITY .
ZVI_PROG_FLOW-MANDT =
ZTB_PROG_FLOW-MANDT .
ZVI_PROG_FLOW-REPID =
ZTB_PROG_FLOW-REPID .
ZVI_PROG_FLOW-DYNNR =
ZTB_PROG_FLOW-DYNNR .
ZVI_PROG_FLOW-PRIORITY =
ZTB_PROG_FLOW-PRIORITY .
ZVI_PROG_FLOW-SUBROUTINE =
ZTB_PROG_FLOW-SUBROUTINE .
ZVI_PROG_FLOW-EVENTTYPE =
ZTB_PROG_FLOW-EVENTTYPE .
ZVI_PROG_FLOW-DISABLED =
ZTB_PROG_FLOW-DISABLED .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_PROG_FLOW USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_PROG_FLOW-REPID TO
ZTB_PROG_FLOW-REPID .
MOVE ZVI_PROG_FLOW-DYNNR TO
ZTB_PROG_FLOW-DYNNR .
MOVE ZVI_PROG_FLOW-PRIORITY TO
ZTB_PROG_FLOW-PRIORITY .
MOVE ZVI_PROG_FLOW-MANDT TO
ZTB_PROG_FLOW-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_PROG_FLOW'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_PROG_FLOW TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_PROG_FLOW'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_PROG_PRSF...................................*
FORM GET_DATA_ZVI_PROG_PRSF.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_PROG_PRSF WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_PROG_PRSF .
ZVI_PROG_PRSF-MANDT =
ZTB_PROG_PRSF-MANDT .
ZVI_PROG_PRSF-REPID =
ZTB_PROG_PRSF-REPID .
ZVI_PROG_PRSF-VARNAME =
ZTB_PROG_PRSF-VARNAME .
ZVI_PROG_PRSF-FIELDNAME =
ZTB_PROG_PRSF-FIELDNAME .
ZVI_PROG_PRSF-FIELDVAL =
ZTB_PROG_PRSF-FIELDVAL .
<VIM_TOTAL_STRUC> = ZVI_PROG_PRSF.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_PROG_PRSF .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_PROG_PRSF.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_PROG_PRSF-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_PROG_PRSF WHERE
  REPID = ZVI_PROG_PRSF-REPID AND
  VARNAME = ZVI_PROG_PRSF-VARNAME AND
  FIELDNAME = ZVI_PROG_PRSF-FIELDNAME .
    IF SY-SUBRC = 0.
    DELETE ZTB_PROG_PRSF .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_PROG_PRSF WHERE
  REPID = ZVI_PROG_PRSF-REPID AND
  VARNAME = ZVI_PROG_PRSF-VARNAME AND
  FIELDNAME = ZVI_PROG_PRSF-FIELDNAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_PROG_PRSF.
    ENDIF.
ZTB_PROG_PRSF-MANDT =
ZVI_PROG_PRSF-MANDT .
ZTB_PROG_PRSF-REPID =
ZVI_PROG_PRSF-REPID .
ZTB_PROG_PRSF-VARNAME =
ZVI_PROG_PRSF-VARNAME .
ZTB_PROG_PRSF-FIELDNAME =
ZVI_PROG_PRSF-FIELDNAME .
ZTB_PROG_PRSF-FIELDVAL =
ZVI_PROG_PRSF-FIELDVAL .
    IF SY-SUBRC = 0.
    UPDATE ZTB_PROG_PRSF ##WARN_OK.
    ELSE.
    INSERT ZTB_PROG_PRSF .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_PROG_PRSF-UPD_FLAG,
STATUS_ZVI_PROG_PRSF-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_PROG_PRSF.
  SELECT SINGLE * FROM ZTB_PROG_PRSF WHERE
REPID = ZVI_PROG_PRSF-REPID AND
VARNAME = ZVI_PROG_PRSF-VARNAME AND
FIELDNAME = ZVI_PROG_PRSF-FIELDNAME .
ZVI_PROG_PRSF-MANDT =
ZTB_PROG_PRSF-MANDT .
ZVI_PROG_PRSF-REPID =
ZTB_PROG_PRSF-REPID .
ZVI_PROG_PRSF-VARNAME =
ZTB_PROG_PRSF-VARNAME .
ZVI_PROG_PRSF-FIELDNAME =
ZTB_PROG_PRSF-FIELDNAME .
ZVI_PROG_PRSF-FIELDVAL =
ZTB_PROG_PRSF-FIELDVAL .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_PROG_PRSF USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_PROG_PRSF-REPID TO
ZTB_PROG_PRSF-REPID .
MOVE ZVI_PROG_PRSF-VARNAME TO
ZTB_PROG_PRSF-VARNAME .
MOVE ZVI_PROG_PRSF-FIELDNAME TO
ZTB_PROG_PRSF-FIELDNAME .
MOVE ZVI_PROG_PRSF-MANDT TO
ZTB_PROG_PRSF-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_PROG_PRSF'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_PROG_PRSF TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_PROG_PRSF'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_PROG_PRSV...................................*
FORM GET_DATA_ZVI_PROG_PRSV.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_PROG_PRSV WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_PROG_PRSV .
ZVI_PROG_PRSV-MANDT =
ZTB_PROG_PRSV-MANDT .
ZVI_PROG_PRSV-REPID =
ZTB_PROG_PRSV-REPID .
ZVI_PROG_PRSV-VARNAME =
ZTB_PROG_PRSV-VARNAME .
ZVI_PROG_PRSV-STRNAME =
ZTB_PROG_PRSV-STRNAME .
ZVI_PROG_PRSV-INTTAB =
ZTB_PROG_PRSV-INTTAB .
<VIM_TOTAL_STRUC> = ZVI_PROG_PRSV.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_PROG_PRSV .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_PROG_PRSV.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_PROG_PRSV-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_PROG_PRSV WHERE
  REPID = ZVI_PROG_PRSV-REPID AND
  VARNAME = ZVI_PROG_PRSV-VARNAME .
    IF SY-SUBRC = 0.
    DELETE ZTB_PROG_PRSV .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_PROG_PRSV WHERE
  REPID = ZVI_PROG_PRSV-REPID AND
  VARNAME = ZVI_PROG_PRSV-VARNAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_PROG_PRSV.
    ENDIF.
ZTB_PROG_PRSV-MANDT =
ZVI_PROG_PRSV-MANDT .
ZTB_PROG_PRSV-REPID =
ZVI_PROG_PRSV-REPID .
ZTB_PROG_PRSV-VARNAME =
ZVI_PROG_PRSV-VARNAME .
ZTB_PROG_PRSV-STRNAME =
ZVI_PROG_PRSV-STRNAME .
ZTB_PROG_PRSV-INTTAB =
ZVI_PROG_PRSV-INTTAB .
    IF SY-SUBRC = 0.
    UPDATE ZTB_PROG_PRSV ##WARN_OK.
    ELSE.
    INSERT ZTB_PROG_PRSV .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_PROG_PRSV-UPD_FLAG,
STATUS_ZVI_PROG_PRSV-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_PROG_PRSV.
  SELECT SINGLE * FROM ZTB_PROG_PRSV WHERE
REPID = ZVI_PROG_PRSV-REPID AND
VARNAME = ZVI_PROG_PRSV-VARNAME .
ZVI_PROG_PRSV-MANDT =
ZTB_PROG_PRSV-MANDT .
ZVI_PROG_PRSV-REPID =
ZTB_PROG_PRSV-REPID .
ZVI_PROG_PRSV-VARNAME =
ZTB_PROG_PRSV-VARNAME .
ZVI_PROG_PRSV-STRNAME =
ZTB_PROG_PRSV-STRNAME .
ZVI_PROG_PRSV-INTTAB =
ZTB_PROG_PRSV-INTTAB .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_PROG_PRSV USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_PROG_PRSV-REPID TO
ZTB_PROG_PRSV-REPID .
MOVE ZVI_PROG_PRSV-VARNAME TO
ZTB_PROG_PRSV-VARNAME .
MOVE ZVI_PROG_PRSV-MANDT TO
ZTB_PROG_PRSV-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_PROG_PRSV'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_PROG_PRSV TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_PROG_PRSV'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_PROG_SCR....................................*
FORM GET_DATA_ZVI_PROG_SCR.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_PROG_SCR WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_PROG_SCR .
ZVI_PROG_SCR-MANDT =
ZTB_PROG_SCR-MANDT .
ZVI_PROG_SCR-REPID =
ZTB_PROG_SCR-REPID .
ZVI_PROG_SCR-DYNNR =
ZTB_PROG_SCR-DYNNR .
ZVI_PROG_SCR-PRESUB =
ZTB_PROG_SCR-PRESUB .
<VIM_TOTAL_STRUC> = ZVI_PROG_SCR.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_PROG_SCR .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_PROG_SCR.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_PROG_SCR-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_PROG_SCR WHERE
  REPID = ZVI_PROG_SCR-REPID AND
  DYNNR = ZVI_PROG_SCR-DYNNR .
    IF SY-SUBRC = 0.
    DELETE ZTB_PROG_SCR .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_PROG_SCR WHERE
  REPID = ZVI_PROG_SCR-REPID AND
  DYNNR = ZVI_PROG_SCR-DYNNR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_PROG_SCR.
    ENDIF.
ZTB_PROG_SCR-MANDT =
ZVI_PROG_SCR-MANDT .
ZTB_PROG_SCR-REPID =
ZVI_PROG_SCR-REPID .
ZTB_PROG_SCR-DYNNR =
ZVI_PROG_SCR-DYNNR .
ZTB_PROG_SCR-PRESUB =
ZVI_PROG_SCR-PRESUB .
    IF SY-SUBRC = 0.
    UPDATE ZTB_PROG_SCR ##WARN_OK.
    ELSE.
    INSERT ZTB_PROG_SCR .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_PROG_SCR-UPD_FLAG,
STATUS_ZVI_PROG_SCR-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_PROG_SCR.
  SELECT SINGLE * FROM ZTB_PROG_SCR WHERE
REPID = ZVI_PROG_SCR-REPID AND
DYNNR = ZVI_PROG_SCR-DYNNR .
ZVI_PROG_SCR-MANDT =
ZTB_PROG_SCR-MANDT .
ZVI_PROG_SCR-REPID =
ZTB_PROG_SCR-REPID .
ZVI_PROG_SCR-DYNNR =
ZTB_PROG_SCR-DYNNR .
ZVI_PROG_SCR-PRESUB =
ZTB_PROG_SCR-PRESUB .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_PROG_SCR USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_PROG_SCR-REPID TO
ZTB_PROG_SCR-REPID .
MOVE ZVI_PROG_SCR-DYNNR TO
ZTB_PROG_SCR-DYNNR .
MOVE ZVI_PROG_SCR-MANDT TO
ZTB_PROG_SCR-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_PROG_SCR'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_PROG_SCR TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_PROG_SCR'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_PROG_STEP...................................*
FORM GET_DATA_ZVI_PROG_STEP.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_PROG_STEP WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_PROG_STEP .
ZVI_PROG_STEP-MANDT =
ZTB_PROG_STEP-MANDT .
ZVI_PROG_STEP-REPID =
ZTB_PROG_STEP-REPID .
ZVI_PROG_STEP-DYNNR =
ZTB_PROG_STEP-DYNNR .
ZVI_PROG_STEP-CSTEP =
ZTB_PROG_STEP-CSTEP .
ZVI_PROG_STEP-STEPNM =
ZTB_PROG_STEP-STEPNM .
ZVI_PROG_STEP-FIELD1 =
ZTB_PROG_STEP-FIELD1 .
ZVI_PROG_STEP-VALUE1 =
ZTB_PROG_STEP-VALUE1 .
ZVI_PROG_STEP-FIELD2 =
ZTB_PROG_STEP-FIELD2 .
ZVI_PROG_STEP-VALUE2 =
ZTB_PROG_STEP-VALUE2 .
ZVI_PROG_STEP-FIELD3 =
ZTB_PROG_STEP-FIELD3 .
ZVI_PROG_STEP-VALUE3 =
ZTB_PROG_STEP-VALUE3 .
<VIM_TOTAL_STRUC> = ZVI_PROG_STEP.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_PROG_STEP .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_PROG_STEP.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_PROG_STEP-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_PROG_STEP WHERE
  REPID = ZVI_PROG_STEP-REPID AND
  DYNNR = ZVI_PROG_STEP-DYNNR AND
  CSTEP = ZVI_PROG_STEP-CSTEP .
    IF SY-SUBRC = 0.
    DELETE ZTB_PROG_STEP .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_PROG_STEP WHERE
  REPID = ZVI_PROG_STEP-REPID AND
  DYNNR = ZVI_PROG_STEP-DYNNR AND
  CSTEP = ZVI_PROG_STEP-CSTEP .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_PROG_STEP.
    ENDIF.
ZTB_PROG_STEP-MANDT =
ZVI_PROG_STEP-MANDT .
ZTB_PROG_STEP-REPID =
ZVI_PROG_STEP-REPID .
ZTB_PROG_STEP-DYNNR =
ZVI_PROG_STEP-DYNNR .
ZTB_PROG_STEP-CSTEP =
ZVI_PROG_STEP-CSTEP .
ZTB_PROG_STEP-STEPNM =
ZVI_PROG_STEP-STEPNM .
ZTB_PROG_STEP-FIELD1 =
ZVI_PROG_STEP-FIELD1 .
ZTB_PROG_STEP-VALUE1 =
ZVI_PROG_STEP-VALUE1 .
ZTB_PROG_STEP-FIELD2 =
ZVI_PROG_STEP-FIELD2 .
ZTB_PROG_STEP-VALUE2 =
ZVI_PROG_STEP-VALUE2 .
ZTB_PROG_STEP-FIELD3 =
ZVI_PROG_STEP-FIELD3 .
ZTB_PROG_STEP-VALUE3 =
ZVI_PROG_STEP-VALUE3 .
    IF SY-SUBRC = 0.
    UPDATE ZTB_PROG_STEP ##WARN_OK.
    ELSE.
    INSERT ZTB_PROG_STEP .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_PROG_STEP-UPD_FLAG,
STATUS_ZVI_PROG_STEP-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_PROG_STEP.
  SELECT SINGLE * FROM ZTB_PROG_STEP WHERE
REPID = ZVI_PROG_STEP-REPID AND
DYNNR = ZVI_PROG_STEP-DYNNR AND
CSTEP = ZVI_PROG_STEP-CSTEP .
ZVI_PROG_STEP-MANDT =
ZTB_PROG_STEP-MANDT .
ZVI_PROG_STEP-REPID =
ZTB_PROG_STEP-REPID .
ZVI_PROG_STEP-DYNNR =
ZTB_PROG_STEP-DYNNR .
ZVI_PROG_STEP-CSTEP =
ZTB_PROG_STEP-CSTEP .
ZVI_PROG_STEP-STEPNM =
ZTB_PROG_STEP-STEPNM .
ZVI_PROG_STEP-FIELD1 =
ZTB_PROG_STEP-FIELD1 .
ZVI_PROG_STEP-VALUE1 =
ZTB_PROG_STEP-VALUE1 .
ZVI_PROG_STEP-FIELD2 =
ZTB_PROG_STEP-FIELD2 .
ZVI_PROG_STEP-VALUE2 =
ZTB_PROG_STEP-VALUE2 .
ZVI_PROG_STEP-FIELD3 =
ZTB_PROG_STEP-FIELD3 .
ZVI_PROG_STEP-VALUE3 =
ZTB_PROG_STEP-VALUE3 .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_PROG_STEP USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_PROG_STEP-REPID TO
ZTB_PROG_STEP-REPID .
MOVE ZVI_PROG_STEP-DYNNR TO
ZTB_PROG_STEP-DYNNR .
MOVE ZVI_PROG_STEP-CSTEP TO
ZTB_PROG_STEP-CSTEP .
MOVE ZVI_PROG_STEP-MANDT TO
ZTB_PROG_STEP-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_PROG_STEP'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_PROG_STEP TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_PROG_STEP'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_SHEET_LAYOUT................................*
FORM GET_DATA_ZVI_SHEET_LAYOUT.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_SHEET_LAYOUT WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_SHEET_LAYOUT .
ZVI_SHEET_LAYOUT-MANDT =
ZTB_SHEET_LAYOUT-MANDT .
ZVI_SHEET_LAYOUT-REPORT =
ZTB_SHEET_LAYOUT-REPORT .
ZVI_SHEET_LAYOUT-SHEETNO =
ZTB_SHEET_LAYOUT-SHEETNO .
ZVI_SHEET_LAYOUT-FNAME =
ZTB_SHEET_LAYOUT-FNAME .
ZVI_SHEET_LAYOUT-POSID =
ZTB_SHEET_LAYOUT-POSID .
ZVI_SHEET_LAYOUT-ROW_POS =
ZTB_SHEET_LAYOUT-ROW_POS .
ZVI_SHEET_LAYOUT-COL_POS =
ZTB_SHEET_LAYOUT-COL_POS .
ZVI_SHEET_LAYOUT-GRPEX =
ZTB_SHEET_LAYOUT-GRPEX .
ZVI_SHEET_LAYOUT-IS_ITEM =
ZTB_SHEET_LAYOUT-IS_ITEM .
ZVI_SHEET_LAYOUT-INITROWS =
ZTB_SHEET_LAYOUT-INITROWS .
ZVI_SHEET_LAYOUT-INITCOLS =
ZTB_SHEET_LAYOUT-INITCOLS .
ZVI_SHEET_LAYOUT-INSERT_ROW =
ZTB_SHEET_LAYOUT-INSERT_ROW .
ZVI_SHEET_LAYOUT-INSERT_COL =
ZTB_SHEET_LAYOUT-INSERT_COL .
ZVI_SHEET_LAYOUT-EXHDR =
ZTB_SHEET_LAYOUT-EXHDR .
ZVI_SHEET_LAYOUT-EXHCL =
ZTB_SHEET_LAYOUT-EXHCL .
ZVI_SHEET_LAYOUT-NCOLS =
ZTB_SHEET_LAYOUT-NCOLS .
ZVI_SHEET_LAYOUT-GBOLD =
ZTB_SHEET_LAYOUT-GBOLD .
ZVI_SHEET_LAYOUT-PREFIX =
ZTB_SHEET_LAYOUT-PREFIX .
ZVI_SHEET_LAYOUT-SUFFIX =
ZTB_SHEET_LAYOUT-SUFFIX .
ZVI_SHEET_LAYOUT-DOMAIN_CV =
ZTB_SHEET_LAYOUT-DOMAIN_CV .
<VIM_TOTAL_STRUC> = ZVI_SHEET_LAYOUT.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_SHEET_LAYOUT .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_SHEET_LAYOUT.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_SHEET_LAYOUT-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_SHEET_LAYOUT WHERE
  REPORT = ZVI_SHEET_LAYOUT-REPORT AND
  SHEETNO = ZVI_SHEET_LAYOUT-SHEETNO AND
  FNAME = ZVI_SHEET_LAYOUT-FNAME AND
  POSID = ZVI_SHEET_LAYOUT-POSID .
    IF SY-SUBRC = 0.
    DELETE ZTB_SHEET_LAYOUT .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_SHEET_LAYOUT WHERE
  REPORT = ZVI_SHEET_LAYOUT-REPORT AND
  SHEETNO = ZVI_SHEET_LAYOUT-SHEETNO AND
  FNAME = ZVI_SHEET_LAYOUT-FNAME AND
  POSID = ZVI_SHEET_LAYOUT-POSID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_SHEET_LAYOUT.
    ENDIF.
ZTB_SHEET_LAYOUT-MANDT =
ZVI_SHEET_LAYOUT-MANDT .
ZTB_SHEET_LAYOUT-REPORT =
ZVI_SHEET_LAYOUT-REPORT .
ZTB_SHEET_LAYOUT-SHEETNO =
ZVI_SHEET_LAYOUT-SHEETNO .
ZTB_SHEET_LAYOUT-FNAME =
ZVI_SHEET_LAYOUT-FNAME .
ZTB_SHEET_LAYOUT-POSID =
ZVI_SHEET_LAYOUT-POSID .
ZTB_SHEET_LAYOUT-ROW_POS =
ZVI_SHEET_LAYOUT-ROW_POS .
ZTB_SHEET_LAYOUT-COL_POS =
ZVI_SHEET_LAYOUT-COL_POS .
ZTB_SHEET_LAYOUT-GRPEX =
ZVI_SHEET_LAYOUT-GRPEX .
ZTB_SHEET_LAYOUT-IS_ITEM =
ZVI_SHEET_LAYOUT-IS_ITEM .
ZTB_SHEET_LAYOUT-INITROWS =
ZVI_SHEET_LAYOUT-INITROWS .
ZTB_SHEET_LAYOUT-INITCOLS =
ZVI_SHEET_LAYOUT-INITCOLS .
ZTB_SHEET_LAYOUT-INSERT_ROW =
ZVI_SHEET_LAYOUT-INSERT_ROW .
ZTB_SHEET_LAYOUT-INSERT_COL =
ZVI_SHEET_LAYOUT-INSERT_COL .
ZTB_SHEET_LAYOUT-EXHDR =
ZVI_SHEET_LAYOUT-EXHDR .
ZTB_SHEET_LAYOUT-EXHCL =
ZVI_SHEET_LAYOUT-EXHCL .
ZTB_SHEET_LAYOUT-NCOLS =
ZVI_SHEET_LAYOUT-NCOLS .
ZTB_SHEET_LAYOUT-GBOLD =
ZVI_SHEET_LAYOUT-GBOLD .
ZTB_SHEET_LAYOUT-PREFIX =
ZVI_SHEET_LAYOUT-PREFIX .
ZTB_SHEET_LAYOUT-SUFFIX =
ZVI_SHEET_LAYOUT-SUFFIX .
ZTB_SHEET_LAYOUT-DOMAIN_CV =
ZVI_SHEET_LAYOUT-DOMAIN_CV .
    IF SY-SUBRC = 0.
    UPDATE ZTB_SHEET_LAYOUT ##WARN_OK.
    ELSE.
    INSERT ZTB_SHEET_LAYOUT .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_SHEET_LAYOUT-UPD_FLAG,
STATUS_ZVI_SHEET_LAYOUT-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_SHEET_LAYOUT.
  SELECT SINGLE * FROM ZTB_SHEET_LAYOUT WHERE
REPORT = ZVI_SHEET_LAYOUT-REPORT AND
SHEETNO = ZVI_SHEET_LAYOUT-SHEETNO AND
FNAME = ZVI_SHEET_LAYOUT-FNAME AND
POSID = ZVI_SHEET_LAYOUT-POSID .
ZVI_SHEET_LAYOUT-MANDT =
ZTB_SHEET_LAYOUT-MANDT .
ZVI_SHEET_LAYOUT-REPORT =
ZTB_SHEET_LAYOUT-REPORT .
ZVI_SHEET_LAYOUT-SHEETNO =
ZTB_SHEET_LAYOUT-SHEETNO .
ZVI_SHEET_LAYOUT-FNAME =
ZTB_SHEET_LAYOUT-FNAME .
ZVI_SHEET_LAYOUT-POSID =
ZTB_SHEET_LAYOUT-POSID .
ZVI_SHEET_LAYOUT-ROW_POS =
ZTB_SHEET_LAYOUT-ROW_POS .
ZVI_SHEET_LAYOUT-COL_POS =
ZTB_SHEET_LAYOUT-COL_POS .
ZVI_SHEET_LAYOUT-GRPEX =
ZTB_SHEET_LAYOUT-GRPEX .
ZVI_SHEET_LAYOUT-IS_ITEM =
ZTB_SHEET_LAYOUT-IS_ITEM .
ZVI_SHEET_LAYOUT-INITROWS =
ZTB_SHEET_LAYOUT-INITROWS .
ZVI_SHEET_LAYOUT-INITCOLS =
ZTB_SHEET_LAYOUT-INITCOLS .
ZVI_SHEET_LAYOUT-INSERT_ROW =
ZTB_SHEET_LAYOUT-INSERT_ROW .
ZVI_SHEET_LAYOUT-INSERT_COL =
ZTB_SHEET_LAYOUT-INSERT_COL .
ZVI_SHEET_LAYOUT-EXHDR =
ZTB_SHEET_LAYOUT-EXHDR .
ZVI_SHEET_LAYOUT-EXHCL =
ZTB_SHEET_LAYOUT-EXHCL .
ZVI_SHEET_LAYOUT-NCOLS =
ZTB_SHEET_LAYOUT-NCOLS .
ZVI_SHEET_LAYOUT-GBOLD =
ZTB_SHEET_LAYOUT-GBOLD .
ZVI_SHEET_LAYOUT-PREFIX =
ZTB_SHEET_LAYOUT-PREFIX .
ZVI_SHEET_LAYOUT-SUFFIX =
ZTB_SHEET_LAYOUT-SUFFIX .
ZVI_SHEET_LAYOUT-DOMAIN_CV =
ZTB_SHEET_LAYOUT-DOMAIN_CV .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_SHEET_LAYOUT USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_SHEET_LAYOUT-REPORT TO
ZTB_SHEET_LAYOUT-REPORT .
MOVE ZVI_SHEET_LAYOUT-SHEETNO TO
ZTB_SHEET_LAYOUT-SHEETNO .
MOVE ZVI_SHEET_LAYOUT-FNAME TO
ZTB_SHEET_LAYOUT-FNAME .
MOVE ZVI_SHEET_LAYOUT-POSID TO
ZTB_SHEET_LAYOUT-POSID .
MOVE ZVI_SHEET_LAYOUT-MANDT TO
ZTB_SHEET_LAYOUT-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_SHEET_LAYOUT'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_SHEET_LAYOUT TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_SHEET_LAYOUT'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .
